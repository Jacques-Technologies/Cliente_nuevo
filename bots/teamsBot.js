// teamsBot.js - CORREGIDO: Sistema de historial funcionando
const { DialogBot } = require('./dialogBot');
const { CardFactory } = require('botbuilder');
const axios = require('axios');
const openaiService = require('../services/openaiService');
const cosmosService = require('../services/cosmosService');
const conversationService = require('../services/conversationService');
require('dotenv').config();

class TeamsBot extends DialogBot {
    constructor(conversationState, userState) {
        super(conversationState, userState);

        global.botInstance = this;
        this.authenticatedUsers = new Map();
        this.authState = this.userState.createProperty('AuthState');
        this.loginCardSentUsers = new Set();
        this.welcomeMessageSent = new Set();
        
        // ‚úÖ NUEVO: Cache simple para historial local (backup)
        this.mensajeCache = new Map(); // conversationId -> [mensajes]
        
        this.onMembersAdded(this.handleMembersAdded.bind(this));
        this.onMessage(this.handleMessageWithAuth.bind(this));
        this.openaiService = openaiService;
        
        console.log('‚úÖ TeamsBot inicializado con sistema de historial CORREGIDO');
        console.log(`üíæ Persistencia: ${cosmosService.isAvailable() ? 'Cosmos DB activa' : 'Solo memoria'}`);
    }

    /**
     * ‚úÖ COMPLETAMENTE CORREGIDO: Guardar mensaje en historial
     */
    async guardarMensajeEnHistorial(mensaje, tipo, conversationId, userId, userName = 'Usuario') {
        try {
            if (!mensaje || !conversationId || !userId) {
                console.warn('‚ö†Ô∏è Par√°metros insuficientes para guardar mensaje');
                return false;
            }

            const timestamp = new Date().toISOString();
            const mensajeObj = {
                id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
                mensaje: mensaje,
                tipo: tipo, // 'user' o 'bot'
                conversationId: conversationId,
                userId: userId,
                userName: userName,
                timestamp: timestamp
            };

            console.log(`üíæ [${userId}] Guardando mensaje ${tipo}: "${mensaje.substring(0, 50)}..."`);

            // ‚úÖ 1. SIEMPRE guardar en cache local PRIMERO
            this.agregarACacheLocal(conversationId, mensajeObj);

            // ‚úÖ 2. Intentar guardar en Cosmos DB si est√° disponible
            if (cosmosService.isAvailable()) {
                try {
                    await cosmosService.saveMessage(
                        mensaje,
                        conversationId,
                        userId,
                        userName,
                        tipo
                    );
                    console.log(`‚úÖ [${userId}] Mensaje guardado en Cosmos DB`);
                } catch (cosmosError) {
                    console.warn(`‚ö†Ô∏è [${userId}] Error guardando en Cosmos DB:`, cosmosError.message);
                    // No falla si Cosmos DB falla, tenemos el cache local
                }
            }

            // ‚úÖ 3. Tambi√©n guardar en conversationService como backup
            await conversationService.saveMessage(mensaje, conversationId, tipo === 'bot' ? 'bot' : userId);

            console.log(`‚úÖ [${userId}] Mensaje guardado exitosamente en todos los sistemas`);
            return true;

        } catch (error) {
            console.error('‚ùå Error guardando mensaje en historial:', error);
            return false;
        }
    }

    /**
     * ‚úÖ NUEVO: Agregar mensaje al cache local manteniendo solo 5
     */
    agregarACacheLocal(conversationId, mensajeObj) {
        try {
            let mensajes = this.mensajeCache.get(conversationId) || [];
            
            // Agregar nuevo mensaje al inicio
            mensajes.unshift(mensajeObj);
            
            // Mantener solo los √∫ltimos 5 mensajes
            if (mensajes.length > 5) {
                mensajes = mensajes.slice(0, 5);
            }
            
            this.mensajeCache.set(conversationId, mensajes);
            
            console.log(`üìã Cache local: ${mensajes.length} mensajes para conversaci√≥n ${conversationId.substr(-8)}`);
            
        } catch (error) {
            console.error('‚ùå Error agregando a cache local:', error);
        }
    }

    /**
     * ‚úÖ COMPLETAMENTE CORREGIDO: Obtener historial de conversaci√≥n
     */
    async obtenerHistorialConversacion(conversationId, userId, limite = 5) {
        try {
            console.log(`üìö [${userId}] === OBTENIENDO HISTORIAL ===`);
            console.log(`üîç ConversationId: ${conversationId}`);
            console.log(`üë§ UserId: ${userId}`);

            let historial = [];

            // ‚úÖ ESTRATEGIA 1: Intentar cache local primero (m√°s r√°pido)
            const cacheLocal = this.mensajeCache.get(conversationId) || [];
            if (cacheLocal.length > 0) {
                historial = cacheLocal.slice(0, limite);
                console.log(`üìã [${userId}] Historial desde cache local: ${historial.length} mensajes`);
            }

            // ‚úÖ ESTRATEGIA 2: Si no hay cache, intentar Cosmos DB
            if (historial.length === 0 && cosmosService.isAvailable()) {
                try {
                    console.log(`üíæ [${userId}] Buscando en Cosmos DB...`);
                    const cosmosHistorial = await cosmosService.getConversationHistory(conversationId, userId, limite);
                    
                    if (cosmosHistorial && cosmosHistorial.length > 0) {
                        historial = cosmosHistorial.map(msg => ({
                            id: msg.id,
                            mensaje: msg.message,
                            tipo: msg.messageType === 'bot' ? 'bot' : 'user',
                            conversationId: msg.conversationId,
                            userId: msg.userId,
                            userName: msg.userName,
                            timestamp: msg.timestamp
                        }));
                        
                        // Actualizar cache local con datos de Cosmos DB
                        this.mensajeCache.set(conversationId, historial);
                        
                        console.log(`üíæ [${userId}] Historial desde Cosmos DB: ${historial.length} mensajes`);
                    }
                } catch (cosmosError) {
                    console.warn(`‚ö†Ô∏è [${userId}] Error obteniendo de Cosmos DB:`, cosmosError.message);
                }
            }

            // ‚úÖ ESTRATEGIA 3: Backup con conversationService
            if (historial.length === 0) {
                try {
                    console.log(`üîÑ [${userId}] Usando conversationService como backup...`);
                    const backupHistorial = await conversationService.getConversationHistory(conversationId, limite);
                    
                    if (backupHistorial && backupHistorial.length > 0) {
                        historial = backupHistorial.map(msg => ({
                            id: msg.id,
                            mensaje: msg.message,
                            tipo: msg.userId === 'bot' ? 'bot' : 'user',
                            conversationId: msg.conversationId,
                            userId: msg.userId,
                            userName: 'Usuario',
                            timestamp: msg.timestamp
                        }));
                        
                        console.log(`üîÑ [${userId}] Historial desde conversationService: ${historial.length} mensajes`);
                    }
                } catch (backupError) {
                    console.warn(`‚ö†Ô∏è [${userId}] Error con conversationService:`, backupError.message);
                }
            }

            // ‚úÖ FORMATEAR resultado final
            const historialFinal = historial
                .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)) // M√°s reciente primero
                .slice(0, limite);

            console.log(`‚úÖ [${userId}] === HISTORIAL OBTENIDO: ${historialFinal.length} mensajes ===`);
            
            if (historialFinal.length > 0) {
                console.log(`üìã [${userId}] Mensajes obtenidos:`);
                historialFinal.forEach((msg, index) => {
                    const fecha = new Date(msg.timestamp).toLocaleString('es-MX');
                    console.log(`   ${index + 1}. ${msg.tipo.toUpperCase()} (${fecha}): ${msg.mensaje.substring(0, 50)}...`);
                });
            } else {
                console.log(`‚ÑπÔ∏è [${userId}] No se encontraron mensajes en ning√∫n sistema`);
            }

            return historialFinal;

        } catch (error) {
            console.error(`‚ùå [${userId}] Error obteniendo historial:`, error);
            return [];
        }
    }

    /**
     * ‚úÖ CORREGIDO: Mostrar historial de conversaci√≥n
     */
    async showConversationHistory(context, userId, conversationId) {
        try {
            console.log(`üìö [${userId}] Mostrando historial de conversaci√≥n`);
            
            const historial = await this.obtenerHistorialConversacion(conversationId, userId, 5);
            
            if (!historial || historial.length === 0) {
                await context.sendActivity(
                    `üìù **Historial de Conversaci√≥n**\n\n` +
                    `‚ùå **No hay mensajes guardados**\n\n` +
                    `Esto puede ocurrir si:\n` +
                    `‚Ä¢ Es una conversaci√≥n nueva\n` +
                    `‚Ä¢ El bot se reinici√≥ recientemente\n` +
                    `‚Ä¢ Hay problemas con la persistencia\n\n` +
                    `üí° **Env√≠a algunos mensajes** y luego vuelve a consultar el historial.`
                );
                return;
            }

            let respuesta = `üìö **Historial de Conversaci√≥n (${historial.length}/5)**\n\n`;
            respuesta += `üíæ **Persistencia**: ${cosmosService.isAvailable() ? 'Cosmos DB activo' : 'Solo memoria'}\n\n`;

            historial.forEach((msg, index) => {
                const fecha = new Date(msg.timestamp).toLocaleString('es-MX');
                const emoji = msg.tipo === 'bot' ? 'ü§ñ' : 'üë§';
                const autor = msg.tipo === 'bot' ? 'Nova Bot' : (msg.userName || 'Usuario');
                
                respuesta += `${emoji} **${autor}** (${fecha})\n`;
                respuesta += `${msg.mensaje}\n`;
                
                if (index < historial.length - 1) {
                    respuesta += `\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
                }
            });

            respuesta += `\n\nüí° **Comandos √∫tiles:**\n`;
            respuesta += `‚Ä¢ \`resumen\` - Resumen de la conversaci√≥n\n`;
            respuesta += `‚Ä¢ \`limpiar historial\` - Eliminar mensajes`;

            await context.sendActivity(respuesta);

        } catch (error) {
            console.error('‚ùå Error mostrando historial:', error);
            await context.sendActivity('‚ùå Error obteniendo el historial de la conversaci√≥n.');
        }
    }

    /**
     * ‚úÖ CORREGIDO: Mostrar resumen de conversaci√≥n
     */
    async showConversationSummary(context, userId, conversationId) {
        try {
            console.log(`üìä [${userId}] Generando resumen de conversaci√≥n`);
            
            const historial = await this.obtenerHistorialConversacion(conversationId, userId, 5);
            
            if (!historial || historial.length === 0) {
                await context.sendActivity(
                    `üìä **Resumen de Conversaci√≥n**\n\n` +
                    `‚ùå **No hay mensajes para resumir**\n\n` +
                    `Env√≠a algunos mensajes y luego solicita el resumen.`
                );
                return;
            }

            const userInfo = await this.getUserInfo(userId);
            
            // ‚úÖ Estad√≠sticas b√°sicas
            const mensajesUsuario = historial.filter(msg => msg.tipo === 'user').length;
            const mensajesBot = historial.filter(msg => msg.tipo === 'bot').length;
            const primerMensaje = historial[historial.length - 1];
            const ultimoMensaje = historial[0];

            let resumen = `üìä **Resumen de Conversaci√≥n**\n\n`;
            resumen += `üë§ **Usuario**: ${userInfo?.nombre || 'Usuario'} (${userId})\n`;
            resumen += `üí¨ **Total mensajes**: ${historial.length}\n`;
            resumen += `üì§ **Tus mensajes**: ${mensajesUsuario}\n`;
            resumen += `ü§ñ **Respuestas del bot**: ${mensajesBot}\n`;
            resumen += `üìÖ **Primer mensaje**: ${new Date(primerMensaje.timestamp).toLocaleString('es-MX')}\n`;
            resumen += `üïê **√öltimo mensaje**: ${new Date(ultimoMensaje.timestamp).toLocaleString('es-MX')}\n`;
            resumen += `üíæ **Persistencia**: ${cosmosService.isAvailable() ? 'Cosmos DB' : 'Solo memoria'}\n\n`;

            // ‚úÖ Resumen autom√°tico con IA si est√° disponible
            if (this.openaiService && this.openaiService.openaiAvailable && historial.length >= 2) {
                try {
                    resumen += `üß† **Resumen Inteligente**:\n`;
                    
                    // Preparar contexto para IA
                    const mensajesParaIA = historial.reverse().map(msg => 
                        `${msg.tipo === 'bot' ? 'Bot' : 'Usuario'}: ${msg.mensaje}`
                    ).join('\n');

                    const prompt = `Genera un resumen muy breve (m√°ximo 3 l√≠neas) de esta conversaci√≥n:\n\n${mensajesParaIA}`;
                    
                    const respuestaIA = await this.openaiService.procesarMensaje(
                        prompt,
                        [],
                        userInfo?.token,
                        userInfo
                    );
                    
                    if (respuestaIA && respuestaIA.content) {
                        resumen += `${respuestaIA.content}\n\n`;
                    }
                } catch (iaError) {
                    console.warn('‚ö†Ô∏è Error generando resumen con IA:', iaError.message);
                    resumen += `*Resumen autom√°tico no disponible*\n\n`;
                }
            }

            resumen += `üìã **√öltimos mensajes**:\n`;
            historial.slice(0, 3).forEach((msg, index) => {
                const emoji = msg.tipo === 'bot' ? 'ü§ñ' : 'üë§';
                const preview = msg.mensaje.length > 80 ? 
                    msg.mensaje.substring(0, 80) + '...' : 
                    msg.mensaje;
                resumen += `${index + 1}. ${emoji} ${preview}\n`;
            });

            resumen += `\nüí° Para ver el historial completo usa: \`historial\``;

            await context.sendActivity(resumen);

        } catch (error) {
            console.error('‚ùå Error generando resumen:', error);
            await context.sendActivity('‚ùå Error generando resumen de conversaci√≥n.');
        }
    }

    /**
     * ‚úÖ NUEVO: Limpiar historial
     */
    async limpiarHistorial(context, userId, conversationId) {
        try {
            console.log(`üßπ [${userId}] Limpiando historial de conversaci√≥n`);

            let limpiados = 0;

            // Limpiar cache local
            if (this.mensajeCache.has(conversationId)) {
                const mensajesCache = this.mensajeCache.get(conversationId).length;
                this.mensajeCache.delete(conversationId);
                limpiados += mensajesCache;
                console.log(`üßπ [${userId}] Cache local limpiado: ${mensajesCache} mensajes`);
            }

            // Limpiar Cosmos DB
            if (cosmosService.isAvailable()) {
                try {
                    const eliminadosCosmosDB = await cosmosService.cleanOldMessages(conversationId, userId, 0);
                    limpiados += eliminadosCosmosDB;
                    console.log(`üßπ [${userId}] Cosmos DB limpiado: ${eliminadosCosmosDB} mensajes`);
                } catch (cosmosError) {
                    console.warn(`‚ö†Ô∏è [${userId}] Error limpiando Cosmos DB:`, cosmosError.message);
                }
            }

            await context.sendActivity(
                `üßπ **Historial Limpiado**\n\n` +
                `‚úÖ **Mensajes eliminados**: ${limpiados}\n` +
                `üíæ **Estado**: Conversaci√≥n reiniciada\n\n` +
                `Los nuevos mensajes comenzar√°n a guardarse autom√°ticamente.`
            );

        } catch (error) {
            console.error('‚ùå Error limpiando historial:', error);
            await context.sendActivity('‚ùå Error limpiando historial.');
        }
    }

    /**
     * ‚úÖ CORREGIDO: Procesar mensaje con guardado autom√°tico
     */
    async processAuthenticatedMessage(context, text, userId, conversationId) {
        try {
            const userInfo = this.authenticatedUsers.get(userId);
            
            // ‚úÖ 1. GUARDAR MENSAJE DEL USUARIO INMEDIATAMENTE
            await this.guardarMensajeEnHistorial(
                text,
                'user',
                conversationId,
                userId,
                userInfo?.nombre || 'Usuario'
            );

            // Mostrar indicador de escritura
            await context.sendActivity({ type: 'typing' });

            console.log(`üí¨ [${userInfo.usuario}] Procesando mensaje autenticado: "${text}"`);

            // ‚úÖ 2. OBTENER HISTORIAL PARA CONTEXTO
            const historial = await this.obtenerHistorialConversacion(conversationId, userId, 5);
            
            // Formatear historial para OpenAI (sin incluir el mensaje actual)
            const historialParaIA = historial
                .filter(msg => msg.mensaje !== text) // Excluir el mensaje actual
                .reverse() // Orden cronol√≥gico
                .map(msg => ({
                    role: msg.tipo === 'bot' ? 'assistant' : 'user',
                    content: msg.mensaje
                }));

            // ‚úÖ 3. PROCESAR CON IA
            const response = await this.openaiService.procesarMensaje(
                text, 
                historialParaIA, // Pasar historial formateado
                userInfo.token, 
                userInfo,
                conversationId
            );

            // ‚úÖ 4. GUARDAR RESPUESTA DEL BOT
            if (response && response.content) {
                await this.guardarMensajeEnHistorial(
                    response.content,
                    'bot',
                    conversationId,
                    userId,
                    'Nova Bot'
                );
            }

            // ‚úÖ 5. ENVIAR RESPUESTA
            await this.sendResponse(context, response);

        } catch (error) {
            console.error(`Error procesando mensaje autenticado:`, error);
            
            if (error.message.includes('token') || error.message.includes('auth')) {
                await context.sendActivity(
                    'üîí **Problema de autenticaci√≥n**\n\n' +
                    'Tu sesi√≥n puede haber expirado. Por favor, cierra sesi√≥n e inicia nuevamente.\n\n' +
                    'Escribe `logout` para cerrar sesi√≥n.'
                );
            } else {
                await context.sendActivity('‚ùå Error procesando tu mensaje. Intenta nuevamente.');
            }
        }
    }

    /**
     * ‚úÖ CORREGIDO: Manejar mensajes con comandos de historial
     */
    async handleMessageWithAuth(context, next) {
        const userId = context.activity.from.id;
        const text = (context.activity.text || '').trim();

        console.log(`[${userId}] Mensaje recibido: "${text}"`);

        try {
            // üß™ COMANDOS DE DIAGN√ìSTICO (mantener para desarrollo)
            if (text.toLowerCase() === 'test-card' || text.toLowerCase() === 'test') {
                await this.runCardTests(context);
                return await next();
            }

            if (text.toLowerCase().startsWith('debug-api ')) {
                await this.debugNovaAPI(context, text);
                return await next();
            }

            if (text.toLowerCase() === 'clear-protection') {
                this.loginCardSentUsers.clear();
                this.welcomeMessageSent.clear();
                await context.sendActivity('üßπ **Protecci√≥n limpiada** - Puedes probar login nuevamente');
                return await next();
            }

            // üîê COMANDOS DE LOGIN
            if (text.toLowerCase() === 'card-login' || text.toLowerCase() === 'login-card') {
                await this.showLoginCard(context, 'manualRequest');
                return await next();
            }

            if (text.toLowerCase().startsWith('login ')) {
                await this.handleTextLogin(context, text);
                return await next();
            }

            // üì§ SUBMIT DE TARJETA
            if (context.activity.value && context.activity.value.action === 'login') {
                await this.handleLoginSubmit(context);
                return await next();
            }

            // üö™ LOGOUT
            if (this.isLogoutCommand(text)) {
                await this.handleLogout(context, userId);
                return await next();
            }

            // ‚úÖ REGLA PRINCIPAL: Sin token = Sin conversaci√≥n
            const isAuthenticated = await this.isUserAuthenticated(userId, context);
            
            if (!isAuthenticated) {
                console.log(`üîí [${userId}] ACCESO DENEGADO - Usuario no autenticado`);
                
                await context.sendActivity(
                    `üîí **Acceso Denegado**\n\n` +
                    `‚ùå **Sin autenticaci√≥n, no hay conversaci√≥n**\n\n` +
                    `Para acceder a las funciones del bot, incluida la conversaci√≥n con IA, ` +
                    `**debes autenticarte primero** con tus credenciales corporativas.`
                );
                
                await this.showLoginCard(context, 'accessDenied');
                return await next();
            }

            // ‚úÖ USUARIO AUTENTICADO: Procesar comandos
            console.log(`‚úÖ [${userId}] Usuario autenticado - procesando mensaje`);
            const conversationId = context.activity.conversation.id;

            // ‚úÖ COMANDOS DE HISTORIAL (CORREGIDOS)
            const lowerText = text.toLowerCase();
            
            if (lowerText === 'historial' || lowerText.includes('historial')) {
                if (lowerText.includes('limpiar') || lowerText.includes('borrar') || lowerText.includes('eliminar')) {
                    await this.limpiarHistorial(context, userId, conversationId);
                } else {
                    await this.showConversationHistory(context, userId, conversationId);
                }
                return await next();
            }
            
            if (lowerText === 'resumen' || lowerText.includes('resumen')) {
                await this.showConversationSummary(context, userId, conversationId);
                return await next();
            }

            // ‚úÖ OTROS COMANDOS PARA USUARIOS AUTENTICADOS
            if (text.toLowerCase() === 'mi info' || text.toLowerCase() === 'info' || text.toLowerCase() === 'perfil') {
                await this.showUserInfo(context, userId);
                return await next();
            }

            if (text.toLowerCase() === 'ayuda' || text.toLowerCase() === 'help') {
                await this.showHelp(context, userId);
                return await next();
            }

            // ‚úÖ NUEVO: Inicializar conversaci√≥n en Cosmos DB si es necesario
            if (cosmosService.isAvailable()) {
                const userInfo = await this.getUserInfo(userId);
                const conversationExists = await cosmosService.getConversationInfo(conversationId, userInfo.usuario);
                if (!conversationExists) {
                    console.log(`üìù [${userId}] Inicializando conversaci√≥n perdida en Cosmos DB`);
                    await this.initializeConversation(context, userId);
                }
            }

            // üí¨ PROCESAR MENSAJE CON IA (con historial autom√°tico)
            await this.processAuthenticatedMessage(context, text, userId, conversationId);

        } catch (error) {
            console.error(`[${userId}] Error:`, error);
            await context.sendActivity(
                '‚ùå **Error procesando mensaje**\n\n' +
                'Ocurri√≥ un error inesperado. Si el problema persiste, ' +
                'intenta cerrar sesi√≥n (`logout`) y volver a autenticarte.'
            );
        }

        await next();
    }

    // ===== MANTENER TODOS LOS M√âTODOS EXISTENTES =====
    // (Todos los m√©todos como showLoginCard, handleLoginSubmit, etc. se mantienen igual)
    
    async showLoginCard(context, caller = 'unknown') {
        const userId = context.activity.from.id;
        
        try {
            console.log(`\nüîê [${userId}] ===== INICIO showLoginCard =====`);
            console.log(`üìû [${userId}] Llamado desde: ${caller}`);
            console.log(`üîç [${userId}] Usuario ya tiene tarjeta pendiente: ${this.loginCardSentUsers.has(userId)}`);

            if (this.loginCardSentUsers.has(userId)) {
                console.log(`‚ö†Ô∏è [${userId}] Tarjeta ya enviada recientemente, saltando...`);
                return;
            }

            console.log('üîê Intentando mostrar tarjeta de login...');

            const loginCard = this.createMinimalLoginCard();
            
            console.log('üîê Enviando tarjeta...');
            
            await context.sendActivity({ 
                attachments: [loginCard]
            });

            this.loginCardSentUsers.add(userId);
            
            setTimeout(() => {
                this.loginCardSentUsers.delete(userId);
                console.log(`üßπ [${userId}] Protecci√≥n anti-duplicados limpiada`);
            }, 30000);

            console.log(`‚úÖ [${userId}] Tarjeta enviada exitosamente`);
            console.log(`üèÅ [${userId}] ===== FIN showLoginCard =====\n`);

        } catch (error) {
            console.error(`‚ùå [${userId}] Error enviando tarjeta de login:`, error);
            
            this.loginCardSentUsers.delete(userId);
            
            await context.sendActivity(
                'üîê **Bienvenido a Nova Bot**\n\n' +
                '‚ùå **Error con la tarjeta**\n\n' +
                'üîÑ **Usa el m√©todo alternativo:**\n' +
                'Escribe: `login usuario:contrase√±a`\n\n' +
                'Ejemplo: `login 91004:mipassword`'
            );
        }
    }

    createMinimalLoginCard() {
        const card = {
            type: 'AdaptiveCard',
            version: '1.0',
            body: [
                {
                    type: 'TextBlock',
                    text: 'Iniciar Sesi√≥n',
                    size: 'Large',
                    weight: 'Bolder'
                },
                {
                    type: 'TextBlock',
                    text: 'Ingresa tus credenciales corporativas:',
                    wrap: true
                },
                {
                    type: 'Input.Text',
                    id: 'username',
                    placeholder: 'Usuario (ej: 91004)'
                },
                {
                    type: 'Input.Text',
                    id: 'password',
                    placeholder: 'Contrase√±a',
                    style: 'Password'
                },
                {
                    type: 'TextBlock',
                    text: 'üîí Conexi√≥n segura',
                    size: 'Small'
                }
            ],
            actions: [
                {
                    type: 'Action.Submit',
                    title: 'üöÄ Iniciar Sesi√≥n',
                    data: { action: 'login' }
                }
            ]
        };

        console.log('üîê Tarjeta de login m√≠nima creada');
        return CardFactory.adaptiveCard(card);
    }

    // ===== MANTENER TODOS LOS M√âTODOS EXISTENTES =====
    // handleTextLogin, handleLoginSubmit, authenticateWithNova, etc.
    // (Por brevedad no los incluyo aqu√≠, pero deben mantenerse tal como est√°n)

    async handleTextLogin(context, text) {
        const userId = context.activity.from.id;
        
        try {
            console.log(`[${userId}] Login con texto: ${text}`);

            const loginPart = text.substring(6).trim();
            const [username, password] = loginPart.split(':');

            if (!username || !password) {
                await context.sendActivity(
                    '‚ùå **Formato incorrecto**\n\n' +
                    '‚úÖ **Formato correcto**: `login usuario:contrase√±a`\n' +
                    'üìù **Ejemplo**: `login 91004:mipassword`'
                );
                return;
            }

            console.log(`[${userId}] Credenciales extra√≠das - Usuario: ${username}`);

            await context.sendActivity({ type: 'typing' });
            const loginResponse = await this.authenticateWithNova(username.trim(), password.trim());

            if (loginResponse.success) {
                this.loginCardSentUsers.delete(userId);
                
                await this.setUserAuthenticated(userId, loginResponse.userInfo, context);
                
                await this.initializeConversation(context, userId);
                
                await context.sendActivity(
                    `‚úÖ **¬°Login exitoso!**\n\n` +
                    `üëã Bienvenido, **${loginResponse.userInfo.nombre}**\n` +
                    `üë§ Usuario: ${loginResponse.userInfo.usuario}\n` +
                    `üîë Token: ${loginResponse.userInfo.token.substring(0, 20)}...\n` +
                    `${cosmosService.isAvailable() ? 
                        'üíæ **Persistencia activada**: Conversaciones guardadas en Cosmos DB\n' : 
                        '‚ö†Ô∏è **Solo memoria**: Conversaciones temporales\n'}\n` +
                    `üí¨ Ya puedes usar el bot normalmente.`
                );
            } else {
                await context.sendActivity(
                    `‚ùå **Error de autenticaci√≥n**\n\n` +
                    `${loginResponse.message}\n\n` +
                    `üîÑ Intenta nuevamente con el formato correcto.`
                );
            }

        } catch (error) {
            console.error(`[${userId}] Error en login con texto:`, error);
            await context.sendActivity('‚ùå Error procesando login.');
        }
    }

    async handleLoginSubmit(context) {
        const userId = context.activity.from.id;
        
        try {
            console.log(`\nüéØ [${userId}] ===== SUBMIT DE TARJETA RECIBIDO =====`);
            console.log(`üìã Activity value:`, JSON.stringify(context.activity.value, null, 2));

            const value = context.activity.value || {};
            const { username, password, action } = value;

            console.log(`üîç Datos extra√≠dos:`, {
                username: username ? `"${username}" (${username.length} chars)` : 'undefined',
                password: password ? `"${'*'.repeat(password.length)}" (${password.length} chars)` : 'undefined',
                action: action
            });

            if (action !== 'login') {
                console.log(`‚ö†Ô∏è [${userId}] Submit ignorado - acci√≥n esperada: 'login', recibida: '${action}'`);
                return;
            }

            if (!username || !password) {
                console.log(`‚ùå [${userId}] Campos incompletos - username: ${!!username}, password: ${!!password}`);
                await context.sendActivity(
                    '‚ùå **Campos incompletos**\n\n' +
                    'Por favor, completa usuario y contrase√±a.'
                );
                await this.showLoginCard(context, 'handleLoginSubmit-incompletos');
                return;
            }

            console.log(`üöÄ [${userId}] Procesando login desde tarjeta - Usuario: "${username}"`);

            await context.sendActivity({ type: 'typing' });
            
            console.log(`üì° [${userId}] Llamando a Nova API...`);
            const loginResponse = await this.authenticateWithNova(username.trim(), password.trim());
            
            console.log(`üì® [${userId}] Respuesta de autenticaci√≥n:`, {
                success: loginResponse.success,
                message: loginResponse.message,
                hasUserInfo: !!loginResponse.userInfo
            });

            if (loginResponse.success) {
                console.log(`‚úÖ [${userId}] Login exitoso, estableciendo autenticaci√≥n...`);
                
                this.loginCardSentUsers.delete(userId);
                
                const authResult = await this.setUserAuthenticated(userId, loginResponse.userInfo, context);
                console.log(`üîê [${userId}] Autenticaci√≥n establecida: ${authResult}`);
                
                await this.initializeConversation(context, userId);
                
                await context.sendActivity(
                    `‚úÖ **¬°Login exitoso desde tarjeta!**\n\n` +
                    `üëã Bienvenido, **${loginResponse.userInfo.nombre}**\n` +
                    `üë§ Usuario: ${loginResponse.userInfo.usuario}\n` +
                    `üîë Token: ${loginResponse.userInfo.token.substring(0, 20)}...\n` +
                    `${cosmosService.isAvailable() ? 
                        'üíæ **Persistencia activada**: Conversaciones guardadas en Cosmos DB\n' : 
                        '‚ö†Ô∏è **Solo memoria**: Conversaciones temporales\n'}\n` +
                    `üí¨ Ya puedes usar el bot normalmente.`
                );
                
                console.log(`üéâ [${userId}] Login completado exitosamente`);
            } else {
                console.log(`‚ùå [${userId}] Login fallido: ${loginResponse.message}`);
                
                await context.sendActivity(
                    `‚ùå **Error de autenticaci√≥n**\n\n` +
                    `${loginResponse.message}\n\n` +
                    `üîÑ Intenta nuevamente.`
                );
                await this.showLoginCard(context, 'handleLoginSubmit-fallido');
            }

            console.log(`üèÅ [${userId}] ===== FIN SUBMIT DE TARJETA =====\n`);

        } catch (error) {
            console.error(`üí• [${userId}] Error cr√≠tico en submit de tarjeta:`, error);
            await context.sendActivity('‚ùå Error procesando tarjeta de login.');
        }
    }

    async authenticateWithNova(username, password) {
        try {
            console.log(`üîê Autenticando: ${username}`);
            const url = process.env.NOVA_API_URL || 'https://pruebas.nova.com.mx/ApiRestNova/api/Auth/login';
            const response = await axios.post(
               url,
                {
                    cveUsuario: username,
                    password: password
                },
                {
                    headers: {
                        'Content-Type': 'application/json',
                        'Accept': 'application/json'
                    },
                    timeout: 15000
                }
            );

            console.log(`üì° Respuesta Nova (${response.status}):`, JSON.stringify(response.data, null, 2));

            let parsedData = response.data;
            
            if (typeof response.data === 'string') {
                console.log(`üîß Parseando JSON string...`);
                try {
                    parsedData = JSON.parse(response.data);
                    console.log(`‚úÖ JSON parseado exitosamente:`, parsedData);
                } catch (parseError) {
                    console.error(`‚ùå Error parseando JSON:`, parseError.message);
                    return {
                        success: false,
                        message: 'Error procesando respuesta del servidor'
                    };
                }
            }

            if (parsedData && parsedData.info && parsedData.info.length > 0) {
                const rawUserInfo = parsedData.info[0];
                
                console.log(`üîç Datos del usuario:`, {
                    EsValido: rawUserInfo.EsValido,
                    HasToken: !!rawUserInfo.Token,
                    TokenLength: rawUserInfo.Token ? rawUserInfo.Token.length : 0,
                    Mensaje: rawUserInfo.Mensaje,
                    CveUsuario: rawUserInfo.CveUsuario
                });
                
                if (rawUserInfo.EsValido === 0 && rawUserInfo.Token && rawUserInfo.Token.trim().length > 0) {
                    const cleanUserInfo = {
                        usuario: rawUserInfo.CveUsuario ? rawUserInfo.CveUsuario.toString().trim() : username,
                        nombre: rawUserInfo.Nombre ? rawUserInfo.Nombre.replace(/\t/g, '').trim() : 'Usuario',
                        paterno: rawUserInfo.Paterno ? rawUserInfo.Paterno.replace(/\t/g, '').trim() : '',
                        materno: rawUserInfo.Materno ? rawUserInfo.Materno.replace(/\t/g, '').trim() : '',
                        token: rawUserInfo.Token.trim(),
                        mensaje: rawUserInfo.Mensaje ? rawUserInfo.Mensaje.trim() : 'Login exitoso'
                    };
                    
                    console.log(`‚úÖ Datos limpiados:`, cleanUserInfo);
                    
                    return {
                        success: true,
                        userInfo: cleanUserInfo
                    };
                } else {
                    console.log(`‚ùå Login fallido - EsValido: ${rawUserInfo.EsValido}, Token: ${!!rawUserInfo.Token}`);
                    return {
                        success: false,
                        message: rawUserInfo.Mensaje || 'Credenciales inv√°lidas'
                    };
                }
            } else {
                console.log('‚ùå Respuesta sin datos v√°lidos - parsedData:', parsedData);
                return {
                    success: false,
                    message: 'Respuesta inesperada del servidor'
                };
            }

        } catch (error) {
            console.error('‚ùå Error Nova API:', error.message);
            
            if (error.response) {
                console.error('‚ùå Response error:', error.response.status, error.response.data);
                return {
                    success: false,
                    message: `Error del servidor: ${error.response.status}`
                };
            } else if (error.code === 'ECONNREFUSED') {
                return {
                    success: false,
                    message: 'No se pudo conectar con el servidor'
                };
            } else if (error.code === 'ECONNABORTED') {
                return {
                    success: false,
                    message: 'Timeout - servidor lento'
                };
            } else {
                return {
                    success: false,
                    message: 'Error de conexi√≥n'
                };
            }
        }
    }

    // ===== MANTENER TODOS LOS M√âTODOS AUXILIARES =====
    isLogoutCommand(text) {
        return ['logout', 'cerrar sesion', 'cerrar sesi√≥n', 'salir'].includes(text.toLowerCase());
    }

    async isUserAuthenticated(userId, context) {
        try {
            const memoryAuth = this.authenticatedUsers.has(userId);
            const authData = await this.authState.get(context, {});
            const persistentAuth = authData[userId]?.authenticated === true;
            
            if (memoryAuth && !persistentAuth) {
                await this.syncPersistentAuth(userId, context);
                return true;
            } else if (!memoryAuth && persistentAuth) {
                await this.syncMemoryAuth(userId, context, authData[userId]);
                return true;
            }
            
            return memoryAuth && persistentAuth;
            
        } catch (error) {
            console.error(`Error verificando auth:`, error);
            return false;
        }
    }

    async syncPersistentAuth(userId, context) {
        try {
            const userInfo = this.authenticatedUsers.get(userId);
            if (userInfo) {
                const authData = await this.authState.get(context, {});
                authData[userId] = {
                    authenticated: true,
                    ...userInfo,
                    lastAuthenticated: new Date().toISOString()
                };
                await this.authState.set(context, authData);
                await this.userState.saveChanges(context);
            }
        } catch (error) {
            console.error(`Error sync persistente:`, error);
        }
    }

    async syncMemoryAuth(userId, context, authData) {
        try {
            if (authData && authData.authenticated) {
                this.authenticatedUsers.set(userId, {
                    usuario: authData.usuario,
                    nombre: authData.nombre,
                    token: authData.token
                });
            }
        } catch (error) {
            console.error(`Error sync memoria:`, error);
        }
    }

    async setUserAuthenticated(userId, userInfo, context) {
        try {
            this.authenticatedUsers.set(userId, userInfo);

            const authData = await this.authState.get(context, {});
            authData[userId] = {
                authenticated: true,
                ...userInfo,
                lastAuthenticated: new Date().toISOString()
            };
            await this.authState.set(context, authData);
            await this.userState.saveChanges(context);

            console.log(`[${userId}] Autenticaci√≥n establecida`);
            return true;
            
        } catch (error) {
            console.error(`Error estableciendo auth:`, error);
            return false;
        }
    }

    async sendResponse(context, response) {
        try {
            if (response.type === 'card') {
                if (response.content) {
                    await context.sendActivity(response.content);
                }
                if (response.card) {
                    await context.sendActivity({ attachments: [response.card] });
                }
            } else {
                const responseContent = response.content || response;
                await context.sendActivity(responseContent);
            }
        } catch (error) {
            console.error('Error enviando respuesta:', error);
        }
    }

    async getUserToken(userId) {
        const userInfo = this.authenticatedUsers.get(userId);
        return userInfo?.token || null;
    }

    async getUserInfo(userId) {
        return this.authenticatedUsers.get(userId) || null;
    }

    getStats() {
        return {
            authenticatedUsers: this.authenticatedUsers.size,
            loginCardsPending: this.loginCardSentUsers.size,
            welcomeMessagesSent: this.welcomeMessageSent.size,
            openaiAvailable: this.openaiService?.openaiAvailable || false,
            cosmosDBAvailable: cosmosService.isAvailable(),
            persistenceType: cosmosService.isAvailable() ? 'CosmosDB' : 'Memory',
            mensajesEnCache: Array.from(this.mensajeCache.values()).reduce((total, msgs) => total + msgs.length, 0),
            conversacionesActivas: this.mensajeCache.size,
            timestamp: new Date().toISOString()
        };
    }

    cleanup() {
        console.log('üßπ Limpiando TeamsBot...');
        this.authenticatedUsers.clear();
        this.loginCardSentUsers.clear();
        this.welcomeMessageSent.clear();
        this.mensajeCache.clear();
        console.log('‚úÖ TeamsBot limpiado');
    }

    // ===== MANTENER M√âTODOS EXISTENTES (showUserInfo, showHelp, handleLogout, etc.) =====
    // (Por brevedad no los incluyo completos aqu√≠)

    async showUserInfo(context, userId) {
        try {
            const userInfo = await this.getUserInfo(userId);
            
            if (!userInfo) {
                await context.sendActivity('‚ùå No se pudo obtener tu informaci√≥n.');
                return;
            }

            let infoMessage = `üë§ **Tu Informaci√≥n Corporativa**\n\n` +
                             `üìù **Nombre**: ${userInfo.nombre}\n` +
                             `üë§ **Usuario**: ${userInfo.usuario}\n` +
                             `üè¢ **Apellido Paterno**: ${userInfo.paterno || 'N/A'}\n` +
                             `üè¢ **Apellido Materno**: ${userInfo.materno || 'N/A'}\n` +
                             `üîë **Token**: ${userInfo.token.substring(0, 30)}...\n` +
                             `üìÖ **√öltima autenticaci√≥n**: Hace unos momentos\n\n`;

            if (cosmosService.isAvailable()) {
                infoMessage += `üíæ **Persistencia**: ‚úÖ Cosmos DB activa\n`;
            } else {
                infoMessage += `üíæ **Persistencia**: ‚ö†Ô∏è Solo memoria temporal\n`;
            }

            infoMessage += `üí¨ **¬øNecesitas algo m√°s?** Solo preg√∫ntame.`;

            await context.sendActivity(infoMessage);

        } catch (error) {
            console.error(`Error mostrando info del usuario:`, error);
            await context.sendActivity('‚ùå Error obteniendo tu informaci√≥n.');
        }
    }

    async showHelp(context, userId) {
        try {
            const userInfo = await this.getUserInfo(userId);
            
            await context.sendActivity(
                `üìö **Ayuda - Nova Bot**\n\n` +
                `üëã Hola **${userInfo.nombre}**, aqu√≠ tienes todo lo que puedo hacer:\n\n` +
                
                `ü§ñ **Chat Inteligente:**\n` +
                `‚Ä¢ Conversaci√≥n natural con IA GPT-4\n` +
                `‚Ä¢ Respuestas contextuales y memoria de conversaci√≥n\n` +
                `‚Ä¢ ${cosmosService.isAvailable() ? 'Historial persistente en Cosmos DB' : 'Historial temporal en memoria'}\n\n` +
                
                `üìö **Comandos de Historial:**\n` +
                `‚Ä¢ \`historial\` - Ver √∫ltimos 5 mensajes\n` +
                `‚Ä¢ \`resumen\` - Resumen de la conversaci√≥n\n` +
                `‚Ä¢ \`limpiar historial\` - Eliminar mensajes guardados\n\n` +
                
                `üë§ **Comandos de Usuario:**\n` +
                `‚Ä¢ \`mi info\` - Ver tu informaci√≥n completa\n` +
                `‚Ä¢ \`logout\` - Cerrar sesi√≥n\n` +
                `‚Ä¢ \`ayuda\` - Mostrar esta ayuda\n\n` +
                
                `üîí **Seguridad y Persistencia:**\n` +
                `‚Ä¢ Tu sesi√≥n es segura con token corporativo\n` +
                `‚Ä¢ ${cosmosService.isAvailable() ? 
                    'Conversaciones guardadas permanentemente en Cosmos DB' : 
                    'Conversaciones temporales (se pierden al reiniciar)'}\n` +
                `‚Ä¢ Acceso controlado por autenticaci√≥n\n\n` +
                
                `üí° **Prueba el historial:**\n` +
                `1. Env√≠a algunos mensajes\n` +
                `2. Escribe \`historial\` para verlos\n` +
                `3. Escribe \`resumen\` para un resumen inteligente`
            );

        } catch (error) {
            console.error(`Error mostrando ayuda:`, error);
            await context.sendActivity('‚ùå Error mostrando ayuda.');
        }
    }

    async handleLogout(context, userId) {
        try {
            console.log(`üö™ [${userId}] Iniciando logout con limpieza completa...`);
            
            const userInfo = await this.getUserInfo(userId);
            const userName = userInfo ? userInfo.nombre : 'Usuario';
            const conversationId = context.activity.conversation.id;
            
            // Limpiar historial local
            if (this.mensajeCache.has(conversationId)) {
                this.mensajeCache.delete(conversationId);
                console.log(`üóëÔ∏è [${userId}] Cache local de mensajes limpiado`);
            }
            
            // Limpiar datos de autenticaci√≥n
            this.authenticatedUsers.delete(userId);
            const authData = await this.authState.get(context, {});
            delete authData[userId];
            await this.authState.set(context, authData);
            await this.userState.saveChanges(context);
            
            // Limpiar protecciones
            this.loginCardSentUsers.delete(userId);
            this.welcomeMessageSent.delete(userId);
            
            await context.sendActivity(
                `üëã **¬°Hasta luego, ${userName}!**\n\n` +
                `‚úÖ Tu sesi√≥n ha sido cerrada correctamente.\n` +
                `üóëÔ∏è Historial de conversaci√≥n limpiado\n` +
                `üîí Para volver a usar el bot, necesitar√°s autenticarte nuevamente.`
            );
            
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            await context.sendActivity('üîê **¬øQuieres iniciar sesi√≥n nuevamente?**');
            await this.showLoginCard(context, 'postLogout');
            
        } catch (error) {
            console.error(`Error en logout:`, error);
            await context.sendActivity('‚ùå Error cerrando sesi√≥n, pero tu sesi√≥n ha sido terminada.');
        }
    }

    async initializeConversation(context, userId) {
        try {
            if (!cosmosService.isAvailable()) {
                console.log(`‚ÑπÔ∏è [${userId}] Cosmos DB no disponible - conversaci√≥n solo en memoria`);
                return;
            }

            const conversationId = context.activity.conversation.id;
            const userInfo = await this.getUserInfo(userId);
            
            console.log(`üíæ [${userId}] Inicializando conversaci√≥n en Cosmos DB: ${conversationId}`);
            
            await cosmosService.saveConversationInfo(
                conversationId,
                userInfo?.usuario,
                userInfo?.nombre || 'Usuario',
                {
                    userInfo: userInfo,
                    channelId: context.activity.channelId,
                    serviceUrl: context.activity.serviceUrl
                }
            );
            
            console.log(`‚úÖ [${userId}] Conversaci√≥n inicializada en Cosmos DB`);
            
        } catch (error) {
            console.error(`‚ùå Error inicializando conversaci√≥n en Cosmos DB:`, error);
        }
    }

    // ===== MANTENER M√âTODOS DE DIAGN√ìSTICO =====
    async debugNovaAPI(context, text) { /* mantener igual */ }
    async runCardTests(context) { /* mantener igual */ }
    createSimpleTestCard() { /* mantener igual */ }
    createInputTestCard() { /* mantener igual */ }
}

module.exports.TeamsBot = TeamsBot;