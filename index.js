// index.js - CORREGIDO: Bot Framework + diagn√≥stico AADSTS700016
const path = require('path');
const restify = require('restify');
const axios = require('axios');
const { 
    BotFrameworkAdapter, 
    MemoryStorage, 
    ConversationState, 
    UserState   
} = require('botbuilder');

// Importar servicios
const { TeamsBot } = require('./bots/teamsBot');
const cosmosService = require('./services/cosmosService');
const documentService = require('./services/documentService');

// Configurar variables de entorno
require('dotenv').config();

// ‚úÖ VARIABLES GLOBALES CORREGIDAS
const appId = process.env.MicrosoftAppId;
const appPassword = process.env.MicrosoftAppPassword;
const tenantId = process.env.MicrosoftAppTenantId;

console.log('ü§ñ ===== NOVA BOT - CONFIGURACI√ìN CORREGIDA =====');
console.log('üîß Bot Framework con correcciones de autenticaci√≥n');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

console.log(`üìã Configuraci√≥n de credenciales:`);
console.log(`   üîë App ID: ${appId ? '‚úÖ Configurado' : '‚ùå FALTANTE'}`);
console.log(`   üîí App Password: ${appPassword ? '‚úÖ Configurado' : '‚ùå FALTANTE'}`);
console.log(`   üè¢ Tenant ID: ${tenantId ? '‚úÖ Configurado' : '‚ö†Ô∏è Multi-tenant'}`);

if (appId) {
    console.log(`   üîç App ID: ${appId}`);
}
if (tenantId) {
    console.log(`   üîç Tenant ID: ${tenantId}`);
}

// ‚úÖ FUNCI√ìN CORREGIDA: Verificar Bot Framework registration
async function verifyBotFrameworkRegistration(appId, appPassword, tenantId) {
    try {
        console.log('\nü§ñ ===== VERIFICACI√ìN BOT FRAMEWORK CORREGIDA =====');
        console.log('üîç Probando autenticaci√≥n espec√≠fica para Bot Framework...');

        const botFrameworkScope = 'https://api.botframework.com/.default';
        console.log(`üéØ Scope: ${botFrameworkScope}`);

        // ‚úÖ CORRECCI√ìN: Usar tenant correcto o common
        const actualTenant = tenantId || 'botframework.com';
        const tokenUrl = `https://login.microsoftonline.com/${actualTenant}/oauth2/v2.0/token`;
        console.log(`üåê Token URL: ${tokenUrl}`);

        const requestBody = new URLSearchParams({
            'grant_type': 'client_credentials',
            'client_id': appId,
            'client_secret': appPassword,
            'scope': botFrameworkScope
        });

        console.log('üì° Enviando request a Azure AD para Bot Framework...');
        
        const response = await axios.post(tokenUrl, requestBody, {
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            timeout: 15000
        });

        if (response.status === 200 && response.data.access_token) {
            console.log('‚úÖ ¬°√âXITO! Bot Framework authentication funciona');
            console.log(`   Token Type: ${response.data.token_type}`);
            console.log(`   Expires In: ${response.data.expires_in} segundos`);
            console.log(`   Token Preview: ${response.data.access_token.substring(0, 50)}...`);
            
            // Verificar token payload
            try {
                const tokenPayload = JSON.parse(Buffer.from(response.data.access_token.split('.')[1], 'base64').toString());
                console.log('üîç Token payload info:');
                console.log(`   Audience: ${tokenPayload.aud}`);
                console.log(`   Issuer: ${tokenPayload.iss}`);
                console.log(`   App ID en token: ${tokenPayload.appid}`);
                console.log(`   Tenant en token: ${tokenPayload.tid}`);
            } catch (decodeError) {
                console.warn('‚ö†Ô∏è No se pudo decodificar token para an√°lisis');
            }

            return {
                success: true,
                token: response.data.access_token,
                message: 'Bot Framework authentication exitosa'
            };
        } else {
            console.error('‚ùå Respuesta inesperada de Azure AD');
            return {
                success: false,
                message: `Respuesta inesperada: ${response.status}`
            };
        }

    } catch (error) {
        console.error('\n‚ùå ===== ERROR BOT FRAMEWORK AUTH =====');
        console.error('üí• Error:', error.message);

        if (error.response?.data) {
            console.error('üìã Respuesta del servidor:', JSON.stringify(error.response.data, null, 2));
            
            if (error.response.data.error === 'invalid_client') {
                console.error('\nüîç DIAGN√ìSTICO: invalid_client');
                console.error('üìã POSIBLES CAUSAS:');
                console.error('   1. App no registrada en Bot Framework Portal');
                console.error('   2. Client Secret incorrecto o expirado');
                console.error('   3. App ID no v√°lido para Bot Framework');
                console.error('\n‚úÖ SOLUCIONES:');
                console.error('   1. Registrar en https://dev.botframework.com');
                console.error('   2. Verificar/renovar Client Secret en Azure Portal');
                console.error('   3. Usar exactamente el mismo App ID en ambos portales');
            } else if (error.response.data.error === 'unauthorized_client') {
                console.error('\nüîç DIAGN√ìSTICO: unauthorized_client (AADSTS700016)');
                console.error('üìã CAUSA ESPEC√çFICA:');
                console.error('   App registrada en Azure AD pero NO en Bot Framework');
                console.error('\n‚úÖ SOLUCI√ìN DEFINITIVA:');
                console.error('   1. Ir a https://dev.botframework.com');
                console.error('   2. "Create a Bot" o "Register existing bot"');
                console.error(`   3. Usar App ID: ${appId}`);
                console.error(`   4. Usar App Password: [tu password actual]`);
                console.error('   5. Configurar Messaging Endpoint');
                console.error('   6. Habilitar Teams Channel');
            }
        }

        return {
            success: false,
            error: error.response?.data || error.message
        };
    }
}

// ‚úÖ FUNCI√ìN CORREGIDA: Verificar endpoint OpenID
async function verifyOpenIDEndpoint(tenantId) {
    try {
        console.log('\nüîç ===== VERIFICACI√ìN OPENID ENDPOINT CORREGIDA =====');
        console.log('üîç Verificando accesibilidad del endpoint OpenID...');

        // ‚úÖ CORRECCI√ìN: Usar formato correcto con gui√≥n
        const actualTenant = tenantId || 'common';
        const openIdUrl = `https://login.microsoftonline.com/${actualTenant}/v2.0/.well-known/openid-configuration`;
        console.log(`üåê URL: ${openIdUrl}`);

        const response = await axios.get(openIdUrl, { 
            timeout: 10000,
            validateStatus: (status) => status < 500
        });

        if (response.status === 200) {
            console.log('‚úÖ OpenID endpoint accesible');
            console.log(`   Issuer: ${response.data.issuer}`);
            console.log(`   Authorization endpoint: ${response.data.authorization_endpoint}`);
            console.log(`   Token endpoint: ${response.data.token_endpoint}`);
            return {
                accessible: true,
                issuer: response.data.issuer,
                data: response.data
            };
        } else if (response.status === 404) {
            console.error('‚ùå OpenID endpoint NO ENCONTRADO (404)');
            console.error('   Esto confirma que el Tenant ID puede ser incorrecto');
            return {
                accessible: false,
                error: 'Endpoint not found (404)',
                recommendation: 'Verificar Tenant ID en Azure Portal'
            };
        } else {
            console.warn(`‚ö†Ô∏è OpenID endpoint respuesta inesperada: ${response.status}`);
            return {
                accessible: false,
                error: `Unexpected status: ${response.status}`,
                recommendation: 'Verificar conectividad y permisos'
            };
        }

    } catch (error) {
        if (error.response?.status === 404) {
            console.error('‚ùå CONFIRMADO: Tenant ID inv√°lido o no existe');
            console.error('   El endpoint OpenID no se encuentra');
            return {
                accessible: false,
                error: 'Tenant ID invalid or does not exist',
                recommendation: 'Verify Tenant ID in Azure Portal',
                confirmsError: true
            };
        } else if (error.code === 'ENOTFOUND') {
            console.error('‚ùå Error de conectividad DNS');
            return {
                accessible: false,
                error: 'DNS resolution failed',
                recommendation: 'Check internet connectivity'
            };
        } else {
            console.error('‚ùå Error verificando OpenID endpoint:', error.message);
            return {
                accessible: false,
                error: error.message,
                recommendation: 'Check connectivity and configuration'
            };
        }
    }
}

// ‚úÖ SERVIDOR PRINCIPAL
const server = restify.createServer();
server.use(restify.plugins.bodyParser());

server.listen(process.env.port || process.env.PORT || 3978, async () => {
    console.log(`\n${server.name} listening on ${server.url}`);
    
    // Ejecutar diagn√≥stico corregido
    if (process.env.SKIP_DIAGNOSTIC !== 'true') {
        await runCompleteDiagnostic();
    }
    
    console.log('\n‚úÖ Bot Nova iniciado');
    console.log(`üíæ Persistencia: ${cosmosService.isAvailable() ? 'Cosmos DB (cosmosService)' : 'Memoria temporal'}`);
});

// ‚úÖ DIAGN√ìSTICO COMPLETO CORREGIDO
async function runCompleteDiagnostic() {
    console.log('\nüöÄ ===== DIAGN√ìSTICO COMPLETO CORREGIDO =====');
    
    // Paso 1: Verificar variables requeridas
    if (!appId || !appPassword) {
        console.error('‚ùå Variables cr√≠ticas faltantes para Bot Framework');
        console.error('\nüìã Requeridas en .env:');
        console.error('   MicrosoftAppId=tu-app-id');
        console.error('   MicrosoftAppPassword=tu-app-password');
        console.error('   MicrosoftAppTenantId=tu-tenant-id (opcional)');
        return false;
    }

    // Paso 2: Verificar OpenID endpoint
    console.log('\nüîç Verificando OpenID endpoint...');
    const openIdResult = await verifyOpenIDEndpoint(tenantId);
    
    if (!openIdResult.accessible) {
        console.log('\n‚ö†Ô∏è OpenID endpoint no accesible, pero continuando...');
        console.log(`   Recomendaci√≥n: ${openIdResult.recommendation}`);
    }

    // Paso 3: Verificar Bot Framework Registration
    const botFrameworkResult = await verifyBotFrameworkRegistration(appId, appPassword, tenantId);
    
    if (botFrameworkResult.success) {
        console.log('\nüéâ ¬°Bot Framework authentication exitosa!');
        console.log('\n‚úÖ ===== DIAGN√ìSTICO COMPLETADO =====');
        console.log('üéØ Tu bot deber√≠a funcionar correctamente');
        console.log('üöÄ Iniciando servidor...');
        return true;
    } else {
        console.log('\n‚ùå ===== DIAGN√ìSTICO FALLIDO =====');
        console.log('üîß Acci√≥n requerida: Registrar en Bot Framework Portal');
        console.log('\nüìã PASOS PARA RESOLVER:');
        console.log('1. Ir a: https://dev.botframework.com');
        console.log('2. Click en "Create a Bot" o "Register"');
        console.log(`3. Usar App ID: ${appId}`);
        console.log('4. Usar App Password existente (NO crear nuevo)');
        console.log('5. Messaging Endpoint: https://tu-dominio.com/api/messages');
        console.log('6. Habilitar Microsoft Teams channel');
        console.log('\n‚ö†Ô∏è Continuando sin esta verificaci√≥n...');
        return false;
    }
}

// ‚úÖ INICIALIZACI√ìN CORREGIDA DEL BOT
let storage;
let conversationState;
let userState;

async function initializeBot() {
    console.log('\nüì¶ Inicializando Bot Framework CORREGIDO...');
    
    try {
        // Storage b√°sico
        storage = new MemoryStorage();
        conversationState = new ConversationState(storage);
        userState = new UserState(storage);
        
        console.log('‚úÖ Estados del Bot Framework inicializados');

        // ‚úÖ CONFIGURACI√ìN CORREGIDA DEL ADAPTER
        console.log('üîê Configurando Bot Framework Adapter CORREGIDO...');

        const adapterConfig = {
            appId: appId,
            appPassword: appPassword
        };

        // ‚úÖ CONFIGURACI√ìN ESPEC√çFICA PARA TENANT
        if (tenantId && tenantId !== 'common') {
            adapterConfig.channelAuthTenant = tenantId;
            adapterConfig.oAuthEndpoint = `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`;
            // ‚úÖ CORRECCI√ìN CR√çTICA: Usar gui√≥n en lugar de gui√≥n bajo
            adapterConfig.openIdMetadata = `https://login.microsoftonline.com/${tenantId}/v2.0/.well-known/openid-configuration`;
            console.log(`üè¢ Configurado con Tenant espec√≠fico: ${tenantId}`);
            console.log(`üîó OAuth Endpoint: ${adapterConfig.oAuthEndpoint}`);
            console.log(`üîó OpenID Metadata: ${adapterConfig.openIdMetadata}`);
        } else {
            console.log('üåê Configurado para multi-tenant/common');
        }

        const adapter = new BotFrameworkAdapter(adapterConfig);

        console.log('‚úÖ Bot Framework Adapter configurado:');
        console.log(`   App ID: ${appId}`);
        console.log(`   Has Password: ${!!appPassword}`);
        console.log(`   Channel Auth Tenant: ${adapterConfig.channelAuthTenant || 'multi-tenant'}`);

        // ‚úÖ MANEJO DE ERRORES MEJORADO
        setupAdapterErrorHandling(adapter);

        // Crear bot
        const bot = new TeamsBot(conversationState, userState);
        
        // ‚úÖ ENDPOINT DE MENSAJES CON MEJOR LOGGING
        server.post('/api/messages', async (req, res) => {
            try {
                console.log('üì® Mensaje recibido en /api/messages');
                await adapter.process(req, res, (context) => bot.run(context));
                console.log('‚úÖ Mensaje procesado exitosamente');
            } catch (error) {
                console.error('‚ùå Error procesando mensaje:', error.message);
                
                // ‚úÖ LOGGING ESPEC√çFICO PARA ERRORES DE AUTENTICACI√ìN
                if (error.message && (error.message.includes('AADSTS700016') || 
                    error.message.includes('Signing Key could not be retrieved') ||
                    error.message.includes('Failed to load openID config'))) {
                    
                    console.error('\nüö® ERROR DE AUTENTICACI√ìN BOT FRAMEWORK DETECTADO');
                    console.error('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
                    console.error('üìã PROBLEMA: Configuraci√≥n de autenticaci√≥n Bot Framework');
                    console.error('\n‚úÖ PASOS PARA RESOLVER:');
                    console.error('   1. Verificar que la app est√© registrada en https://dev.botframework.com');
                    console.error(`   2. App ID correcto: ${appId}`);
                    console.error('   3. App Password v√°lido y no expirado');
                    console.error('   4. Messaging Endpoint configurado correctamente');
                    console.error('   5. Teams Channel habilitado');
                    console.error('\nüîç VERIFICACIONES ADICIONALES:');
                    if (tenantId) {
                        console.error(`   6. Tenant ID correcto: ${tenantId}`);
                        console.error(`   7. OpenID endpoint accesible: https://login.microsoftonline.com/${tenantId}/v2.0/.well-known/openid-configuration`);
                    }
                    console.error('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
                    
                    await generateDiagnosticReport();
                }
                
                res.status(500).send('Error interno del servidor - Ver logs para diagn√≥stico');
            }
        });
        
        console.log('üéØ Bot listo para recibir mensajes');
        
    } catch (error) {
        console.error('‚ùå Error inicializando bot:', error.message);
        
        // ‚úÖ FALLBACK MEJORADO
        console.log('üîÑ Intentando inicializaci√≥n con configuraci√≥n m√≠nima...');
        
        try {
            storage = new MemoryStorage();
            conversationState = new ConversationState(storage);
            userState = new UserState(storage);
            
            // ‚úÖ ADAPTER M√çNIMO SIN TENANT ESPEC√çFICO
            const adapter = new BotFrameworkAdapter({
                appId: appId,
                appPassword: appPassword
            });
            
            setupAdapterErrorHandling(adapter);
            const bot = new TeamsBot(conversationState, userState);
            
            server.post('/api/messages', async (req, res) => {
                try {
                    await adapter.process(req, res, (context) => bot.run(context));
                } catch (error) {
                    console.error('‚ùå Error en configuraci√≥n fallback:', error.message);
                    res.status(500).send('Error interno del servidor');
                }
            });
            
            console.log('‚ö†Ô∏è Bot iniciado con configuraci√≥n fallback (sin tenant espec√≠fico)');
        } catch (fallbackError) {
            console.error('üí• Error cr√≠tico en configuraci√≥n fallback:', fallbackError.message);
            process.exit(1);
        }
    }
}

// ‚úÖ MANEJO DE ERRORES MEJORADO
function setupAdapterErrorHandling(adapter) {
    adapter.onTurnError = async (context, error) => {
        console.error('\n‚ùå ===== ERROR BOT FRAMEWORK MEJORADO =====');
        console.error('Error:', error.message);
        
        // ‚úÖ DETECCI√ìN MEJORADA DE ERRORES
        if (error.message && (
            error.message.includes('AADSTS700016') ||
            error.message.includes('unauthorized_client') ||
            error.message.includes('Signing Key could not be retrieved') ||
            error.message.includes('Failed to load openID config')
        )) {
            console.error('\nüö® ERROR DE CONFIGURACI√ìN BOT FRAMEWORK CONFIRMADO');
            console.error('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
            console.error('üìã CAUSA RA√çZ: App no registrada en Bot Framework Portal');
            console.error('\nüîß SOLUCI√ìN PASO A PASO:');
            console.error('   1. Abrir: https://dev.botframework.com');
            console.error('   2. Hacer login con cuenta Microsoft');
            console.error('   3. Click "Create a Bot" o "Register existing bot"');
            console.error(`   4. Usar EXACTAMENTE este App ID: ${appId}`);
            console.error('   5. Usar la misma App Password que tienes en .env');
            console.error('   6. Messaging Endpoint: https://tu-dominio.onrender.com/api/messages');
            console.error('   7. En Channels, habilitar "Microsoft Teams"');
            console.error('   8. Guardar cambios');
            console.error('\n‚ö†Ô∏è IMPORTANTE: NO crear nuevas credenciales, usar las existentes');
            console.error('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
        }
        
        // Responder al usuario
        try {
            if (error.message && (
                error.message.includes('Failed to load openID config') ||
                error.message.includes('Signing Key could not be retrieved')
            )) {
                await context.sendActivity(
                    'üîß **Error de configuraci√≥n Bot Framework**\n\n' +
                    '**Estado**: El bot no est√° completamente registrado en Bot Framework Portal.\n\n' +
                    '**Para el administrador**: \n' +
                    '1. Ir a https://dev.botframework.com\n' +
                    '2. Registrar este bot con las credenciales existentes\n' +
                    '3. Configurar el endpoint de mensajes\n' +
                    '4. Habilitar Microsoft Teams channel\n\n' +
                    '**Los usuarios pueden seguir usando funciones b√°sicas**'
                );
            } else {
                await context.sendActivity(
                    '‚ö†Ô∏è **Error temporal del bot**\n\n' +
                    'Problema de configuraci√≥n detectado. El administrador ha sido notificado.\n\n' +
                    'Puedes intentar nuevamente en unos minutos.'
                );
            }
        } catch (sendError) {
            console.error('Error enviando mensaje de error:', sendError.message);
        }
    };
}

// ‚úÖ REPORTE DE DIAGN√ìSTICO ACTUALIZADO
async function generateDiagnosticReport() {
    console.log('\nüìä ===== REPORTE DIAGN√ìSTICO ACTUALIZADO =====');
    
    const report = {
        timestamp: new Date().toISOString(),
        problema: 'Bot Framework Authentication Error',
        causa: 'App registrada en Azure AD pero NO en Bot Framework Portal',
        configuracion: {
            appId: appId,
            hasAppPassword: !!appPassword,
            tenantId: tenantId || 'common/multi-tenant',
            nodeVersion: process.version,
            environment: process.env.NODE_ENV || 'development'
        },
        endpoints: {
            azurePortalApp: `https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/${appId}/isMSAApp/`,
            botFrameworkPortal: 'https://dev.botframework.com',
            messagingEndpoint: 'https://tu-dominio.onrender.com/api/messages',
            openIdEndpoint: tenantId ? 
                `https://login.microsoftonline.com/${tenantId}/v2.0/.well-known/openid-configuration` :
                'https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration'
        },
        solucion: {
            paso1: 'Ir a https://dev.botframework.com',
            paso2: `Registrar bot con App ID: ${appId}`,
            paso3: 'Configurar Messaging Endpoint',
            paso4: 'Habilitar Teams Channel',
            paso5: 'Verificar configuraci√≥n'
        }
    };
    
    console.log('üìã Configuraci√≥n actual:');
    console.log(JSON.stringify(report.configuracion, null, 2));
    
    console.log('\nüîó Enlaces importantes:');
    console.log(`   Azure Portal: ${report.endpoints.azurePortalApp}`);
    console.log(`   Bot Framework: ${report.endpoints.botFrameworkPortal}`);
    console.log(`   OpenID Endpoint: ${report.endpoints.openIdEndpoint}`);
    
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    
    return report;
}

// ‚úÖ INICIALIZAR
initializeBot().then(() => {
    console.log('üéâ Inicializaci√≥n completada exitosamente');
}).catch(error => {
    console.error('üí• Error cr√≠tico:', error);
    process.exit(1);
});

// ‚úÖ ENDPOINTS DE DIAGN√ìSTICO MEJORADOS
server.get('/health', async (req, res) => {
    try {
        let botFrameworkStatus = 'unknown';
        
        if (appId && appPassword) {
            try {
                const botFrameworkTest = await verifyBotFrameworkRegistration(appId, appPassword, tenantId);
                botFrameworkStatus = botFrameworkTest.success ? 'registered' : 'not_registered';
            } catch (error) {
                botFrameworkStatus = 'error';
            }
        } else {
            botFrameworkStatus = 'config_missing';
        }

        const cosmosInfo = cosmosService.getConfigInfo();
        const documentInfo = documentService.getConfigInfo();
        
        res.json({
            status: 'OK',
            timestamp: new Date().toISOString(),
            bot: 'Nova Bot - Configuraci√≥n Corregida',
            botFramework: {
                appId: appId ? 'Configurado' : 'Faltante',
                appPassword: appPassword ? 'Configurado' : 'Faltante',
                tenantId: tenantId ? 'Configurado' : 'Multi-tenant',
                registrationStatus: botFrameworkStatus,
                portalUrl: 'https://dev.botframework.com',
                messagingEndpoint: '/api/messages',
                channelAuthTenant: tenantId || 'common'
            },
            azureAD: {
                oauthEndpoint: tenantId ? 
                    `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token` : 
                    'https://login.microsoftonline.com/common/oauth2/v2.0/token',
                // ‚úÖ CORREGIDO: Endpoint OpenID con gui√≥n
                openIdMetadata: tenantId ? 
                    `https://login.microsoftonline.com/${tenantId}/v2.0/.well-known/openid-configuration` : 
                    'https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration',
                azurePortalUrl: appId ? 
                    `https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/${appId}/isMSAApp/` : null
            },
            features: {
                customLogin: true,
                oauth: false,
                azure: true,
                openai: !!process.env.OPENAI_API_KEY,
                cosmosDB: cosmosInfo.available,
                azureSearch: documentInfo.searchAvailable,
                persistencia: cosmosInfo.available ? 'Cosmos DB (cosmosService)' : 'Memoria temporal'
            },
            correcciones: {
                openIdEndpoint: 'Corregido a formato con gui√≥n',
                tenantHandling: 'Mejorado manejo de tenant com√∫n vs espec√≠fico',
                errorHandling: 'Mejorado manejo de errores de autenticaci√≥n',
                diagnostics: 'Diagn√≥stico mejorado para Bot Framework'
            }
        });
    } catch (error) {
        console.error('‚ùå Error en endpoint /health:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Mantener otros endpoints
server.get('/diagnostic', async (req, res) => {
    try {
        let cosmosStats = null;
        if (cosmosService.isAvailable()) {
            try {
                cosmosStats = await cosmosService.getStats();
            } catch (error) {
                console.warn('‚ö†Ô∏è Error obteniendo stats de Cosmos DB:', error.message);
            }
        }

        let documentStats = null;
        if (documentService.isAvailable()) {
            try {
                documentStats = await documentService.getStats();
            } catch (error) {
                console.warn('‚ö†Ô∏è Error obteniendo stats de DocumentService:', error.message);
            }
        }
        
        res.json({
            bot: {
                status: 'running',
                authenticatedUsers: global.botInstance?.getStats?.()?.authenticatedUsers || 0,
                timestamp: new Date().toISOString()
            },
            botFramework: {
                configured: !!(appId && appPassword),
                appId: appId,
                tenantId: tenantId || 'common',
                hasPassword: !!appPassword,
                registrationRequired: 'https://dev.botframework.com',
                messagingEndpoint: '/api/messages',
                corrections: 'Aplicadas correcciones de autenticaci√≥n'
            },
            azureAD: {
                // ‚úÖ ENDPOINT CORREGIDO
                openIdMetadata: tenantId ? 
                    `https://login.microsoftonline.com/${tenantId}/v2.0/.well-known/openid-configuration` : 
                    'https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration',
                oauthEndpoint: tenantId ? 
                    `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token` : 
                    'https://login.microsoftonline.com/common/oauth2/v2.0/token',
                portalUrl: appId ? 
                    `https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/${appId}/isMSAApp/` : null
            },
            memory: {
                used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + ' MB',
                total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024) + ' MB'
            },
            uptime: Math.round(process.uptime()) + ' segundos',
            environment: {
                hasOpenAI: !!process.env.OPENAI_API_KEY,
                hasBotId: !!process.env.MicrosoftAppId,
                hasTenantId: !!process.env.MicrosoftAppTenantId,
                nodeVersion: process.version
            },
            storage: {
                botFramework: 'MemoryStorage',
                conversations: cosmosService.isAvailable() ? 'CosmosDB (cosmosService)' : 'Memory',
                config: cosmosService.getConfigInfo(),
                stats: cosmosStats
            },
            documentService: {
                type: documentService.isAvailable() ? 'Azure Search' : 'Not Available',
                config: documentService.getConfigInfo(),
                stats: documentStats
            }
        });
    } catch (error) {
        console.error('‚ùå Error en endpoint /diagnostic:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Manejo de cierre graceful
process.on('SIGINT', () => {
    console.log('\nüõë Cerrando bot Nova...');
    console.log('üíæ Guardando estados finales...');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüõë Terminando bot Nova...');
    console.log('üíæ Finalizando conexiones...');
    process.exit(0);
});

console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log('üìã NOVA BOT - CONFIGURACI√ìN CORREGIDA');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

console.log('ü§ñ Bot Framework Configuration:');
console.log(`   App ID: ${appId ? '‚úÖ Configurado' : '‚ùå FALTANTE'}`);
console.log(`   App Password: ${appPassword ? '‚úÖ Configurado' : '‚ùå FALTANTE'}`);
console.log(`   Tenant ID: ${tenantId ? `‚úÖ ${tenantId}` : '‚ö†Ô∏è Multi-tenant/Common'}`);
console.log(`   Registration: üîó https://dev.botframework.com`);

console.log('üîß Correcciones Aplicadas:');
console.log('   ‚úÖ OpenID endpoint formato corregido (gui√≥n en lugar de gui√≥n bajo)');
console.log('   ‚úÖ Manejo mejorado de tenant com√∫n vs espec√≠fico');  
console.log('   ‚úÖ Diagn√≥stico mejorado para errores de autenticaci√≥n');
console.log('   ‚úÖ Manejo de errores m√°s espec√≠fico');
console.log('   ‚úÖ Fallback mejorado para configuraci√≥n m√≠nima');

if (!appId || !appPassword) {
    console.error('\nüö® CONFIGURACI√ìN INCOMPLETA');
    console.error('‚ùå Variables requeridas faltantes en .env');
} else {
    console.log('\n‚úÖ CONFIGURACI√ìN BASE COMPLETA');
    console.log('üéØ Si persisten errores, verificar registro en Bot Framework Portal');
}

console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');