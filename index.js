// index.js - SOLUCION COMPLETA para AADSTS700016 y OpenID 404
const path = require('path');
const restify = require('restify');
const axios = require('axios');
const { 
    BotFrameworkAdapter, 
    MemoryStorage, 
    ConversationState, 
    UserState   
} = require('botbuilder');
const { CosmosDbStorage } = require('botbuilder-azure');
// Importar servicios
const { TeamsBot } = require('./bots/teamsBot');
const cosmosService = require('./services/cosmosService');
const documentService = require('./services/documentService');

// Configurar variables de entorno
require('dotenv').config();

// ‚úÖ PASO 1: VALIDACI√ìN CR√çTICA
console.log('üîç DIAGN√ìSTICO AZURE AD - AADSTS700016');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

const appId = process.env.MicrosoftAppId;
const appPassword = process.env.MicrosoftAppPassword;
const tenantId = process.env.MicrosoftAppTenantId;

console.log(`üîë App ID: ${appId ? '‚úÖ Configurado' : '‚ùå FALTANTE'}`);
console.log(`üîí App Password: ${appPassword ? '‚úÖ Configurado' : '‚ùå FALTANTE'}`);
console.log(`üè¢ Tenant ID: ${tenantId ? '‚úÖ Configurado' : '‚ùå FALTANTE - CAUSA DEL ERROR'}`);

if (appId) {
    console.log(`   App ID Value: ${appId}`);
}
if (tenantId) {
    console.log(`   Tenant ID Value: ${tenantId}`);
} else {
    console.log('   ‚ö†Ô∏è CRITICAL: Tenant ID es REQUERIDO para evitar AADSTS700016');
}

// ‚úÖ PASO 2: VERIFICAR VARIABLES CR√çTICAS
const requiredVars = ['MicrosoftAppId', 'MicrosoftAppPassword'];
const missingVars = requiredVars.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
    console.error('‚ùå Variables cr√≠ticas faltantes:');
    missingVars.forEach(varName => console.error(`   ${varName}`));
    process.exit(1);
}

// ‚úÖ PASO 3: VALIDAR TENANT ID CR√çTICO
if (!tenantId) {
    console.error('\nüö® ERROR CR√çTICO: MicrosoftAppTenantId FALTANTE');
    console.error('Este es el problema que causa AADSTS700016');
    console.error('\nüìã PASOS PARA SOLUCIONARLO:');
    console.error('1. Ve a: https://portal.azure.com');
    console.error('2. Azure Active Directory > Properties > Tenant ID');
    console.error('3. Agrega a .env: MicrosoftAppTenantId=tu-tenant-id');
    console.error('4. Reinicia: npm start');
    console.error('\n‚ö†Ô∏è El bot NO funcionar√° sin Tenant ID');
    process.exit(1);
}

// ‚úÖ FUNCI√ìN PARA VERIFICAR TENANT ID
async function verifyTenantExists(tenantId) {
    try {
        const openIdUrl = `https://login.microsoftonline.com/${tenantId}/v2.0/.well-known/openid_configuration`;
        
        console.log(`üîç Verificando OpenID endpoint: ${openIdUrl}`);
        
        const response = await axios.get(openIdUrl, { 
            timeout: 10000,
            validateStatus: (status) => status < 500
        });
        
        if (response.status === 200) {
            console.log(`‚úÖ Tenant ID v√°lido - OpenID config encontrada`);
            console.log(`   Issuer: ${response.data.issuer}`);
            return true;
        } else if (response.status === 404) {
            console.error(`‚ùå TENANT ID INV√ÅLIDO - OpenID config no encontrada (404)`);
            console.error(`   URL probada: ${openIdUrl}`);
            console.error(`   El Tenant ID "${tenantId}" no existe o no es accesible`);
            return false;
        } else {
            console.warn(`‚ö†Ô∏è Respuesta inesperada del OpenID endpoint: ${response.status}`);
            return false;
        }
        
    } catch (error) {
        if (error.response?.status === 404) {
            console.error(`‚ùå TENANT ID "${tenantId}" NO EXISTE`);
            console.error(`   Error 404: OpenID configuration no encontrada`);
            console.error(`   Verifica que el Tenant ID sea correcto en Azure Portal`);
        } else if (error.code === 'ENOTFOUND') {
            console.error(`‚ùå Error de conectividad verificando Tenant ID`);
            console.error(`   No se puede resolver DNS para login.microsoftonline.com`);
        } else {
            console.error(`‚ö†Ô∏è Error verificando Tenant ID: ${error.message}`);
        }
        return false;
    }
}

// ‚úÖ PASO 4: CREAR SERVIDOR
const server = restify.createServer();
server.use(restify.plugins.bodyParser());

server.listen(process.env.port || process.env.PORT || 3978, () => {
    console.log(`\n${server.name} listening on ${server.url}`);
    console.log('‚úÖ Bot Nova iniciado con configuraci√≥n Azure AD correcta');
    console.log(`üíæ Persistencia: ${cosmosService.isAvailable() ? 'Cosmos DB' : 'Memoria temporal'}`);
});

// ‚úÖ DECLARACI√ìN DE VARIABLES DE ALMACENAMIENTO
let storage;
let conversationState;
let userState;

// ‚úÖ PASO 5: INICIALIZAR ALMACENAMIENTO Y BOT FRAMEWORK
async function initializeBot() {
    console.log('üì¶ Inicializando almacenamiento...');
    
    try {
        if (cosmosService.isAvailable()) {
    console.log('üåê Configurando Cosmos DB Storage...');

    storage = new CosmosDbStorage({
        serviceEndpoint: process.env.COSMOS_DB_ENDPOINT,
        authKey: process.env.COSMOS_DB_KEY,
        databaseId: process.env.COSMOS_DB_DATABASE_ID,
        containerId: process.env.COSMOS_DB_CONTAINER_ID
    });

    console.log('‚úÖ Cosmos DB Storage configurado exitosamente');

} else {
    console.warn('‚ö†Ô∏è Cosmos DB no disponible, usando MemoryStorage como fallback');
    storage = new MemoryStorage();
}       
        conversationState = new ConversationState(storage);
        userState = new UserState(storage);
        
        console.log(`‚úÖ Estados inicializados con ${cosmosService.isAvailable() ? 'Cosmos DB' : 'MemoryStorage'}`);

        // ‚úÖ CONFIGURAR ADAPTER DESPU√âS DE STORAGE
        console.log('\nüîê Configurando Bot Framework Adapter...');

        // ‚úÖ VERIFICAR TENANT ID ANTES DE USAR
        let tenantValid = true;
        if (tenantId) {
            console.log(`üîç Verificando Tenant ID: ${tenantId}`);
            tenantValid = await verifyTenantExists(tenantId);
        }

        // ‚úÖ CONFIGURACI√ìN SIMPLIFICADA - Dejar que Bot Framework use endpoints por defecto
        const adapterConfig = {
            appId: appId,
            appPassword: appPassword
        };

        // ‚úÖ SOLO agregar channelAuthTenant si tenemos un Tenant ID v√°lido
        if (tenantId && tenantValid && tenantId !== 'common' && tenantId.length === 36) {
            adapterConfig.channelAuthTenant = tenantId;
            console.log(`‚úÖ Configurando con Tenant espec√≠fico: ${tenantId}`);
        } else {
            console.log('‚ö†Ô∏è Usando configuraci√≥n multi-tenant (sin Tenant espec√≠fico)');
            if (tenantId && !tenantValid) {
                console.warn('‚ö†Ô∏è Tenant ID proporcionado pero no es v√°lido - usando multi-tenant');
            }
        }

        const adapter = new BotFrameworkAdapter(adapterConfig);

        console.log('‚úÖ Adapter configurado:');
        console.log(`   App ID: ${appId}`);
        console.log(`   Has Password: ${!!appPassword}`);
        console.log(`   Channel Auth Tenant: ${adapterConfig.channelAuthTenant || 'multi-tenant'}`);
        console.log(`   OpenID Endpoint: https://login.microsoftonline.com/${adapterConfig.channelAuthTenant || 'common'}/v2.0/.well-known/openid_configuration`);

        // Configurar manejo de errores del adapter
        setupAdapterErrorHandling(adapter);

        // Crear bot
        const bot = new TeamsBot(conversationState, userState);
        
        // Configurar endpoint de mensajes
        server.post('/api/messages', async (req, res) => {
            try {
                await adapter.process(req, res, (context) => bot.run(context));
            } catch (error) {
                console.error('‚ùå Error procesando mensaje:', error);
                
                // Log adicional para errores de autenticaci√≥n
                if (error.message && (error.message.includes('AADSTS') || error.message.includes('openID'))) {
                    console.error('üîê Error de Azure AD en procesamiento de mensaje');
                    await generateDiagnosticReport();
                }
                
                res.status(500).send('Error interno del servidor - Ver logs para diagn√≥stico detallado');
            }
        });
        
        console.log('üéØ Bot listo para recibir mensajes');
        
    } catch (error) {
        console.error('‚ùå Error inicializando almacenamiento:', error.message);
        
        // Fallback a MemoryStorage
        storage = new MemoryStorage();
        conversationState = new ConversationState(storage);
        userState = new UserState(storage);
        console.log('‚úÖ MemoryStorage configurado como fallback');
        
        // Continuar con la configuraci√≥n del bot
        const adapter = new BotFrameworkAdapter({
            appId: appId,
            appPassword: appPassword
        });
        
        setupAdapterErrorHandling(adapter);
        const bot = new TeamsBot(conversationState, userState);
        
        server.post('/api/messages', async (req, res) => {
            try {
                await adapter.process(req, res, (context) => bot.run(context));
            } catch (error) {
                console.error('‚ùå Error procesando mensaje:', error);
                res.status(500).send('Error interno del servidor');
            }
        });
        
        console.log('üéØ Bot listo para recibir mensajes (con fallback)');
    }
}

// ‚úÖ CONFIGURAR MANEJO DE ERRORES DEL ADAPTER
function setupAdapterErrorHandling(adapter) {
    adapter.onTurnError = async (context, error) => {
        console.error('\n‚ùå ===== ERROR BOT FRAMEWORK =====');
        console.error('Error:', error.message);
        console.error('Stack:', error.stack);
        
        // ‚úÖ DIAGN√ìSTICO ESPEC√çFICO PARA ERROR OPENID 404
        if (error.message && error.message.includes('Failed to load openID config')) {
            console.error('\nüîê ERROR OPENID CONFIG DETECTADO:');
            console.error('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
            console.error('üìã ERROR: Failed to load openID config: 404');
            console.error('\nüîç POSIBLES CAUSAS:');
            console.error('   1. Tenant ID incorrecto o no existe');
            console.error('   2. Endpoint OpenID no accesible');
            console.error('   3. Problemas de conectividad');
            console.error('   4. Tenant deshabilitado o eliminado');
            
            console.error('\n‚úÖ PASOS PARA RESOLVER:');
            console.error('   1. Verifica que el Tenant ID sea correcto');
            console.error('   2. Prueba el endpoint manualmente:');
            console.error(`      https://login.microsoftonline.com/${tenantId || 'TU-TENANT-ID'}/v2.0/.well-known/openid_configuration`);
            console.error('   3. Si el endpoint no funciona, el Tenant ID es incorrecto');
            console.error('   4. Obt√©n el Tenant ID correcto desde Azure Portal');
            console.error('   5. Ejecuta: npm run verify-tenant');
        }
        
        // ‚úÖ DIAGN√ìSTICO ESPEC√çFICO PARA ERRORES AZURE AD
        else if (error.message && error.message.includes('AADSTS')) {
            console.error('\nüîê ERROR DE AZURE AD DETECTADO:');
            console.error('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
            
            if (error.message.includes('AADSTS700016')) {
                console.error('üìã ERROR AADSTS700016 - AN√ÅLISIS DETALLADO:');
                console.error(`   App ID configurado: ${appId}`);
                console.error(`   Tenant configurado: ${tenantId}`);
                console.error('\nüîç POSIBLES CAUSAS:');
                console.error('   1. App no registrada en este Tenant');
                console.error('   2. App registrada en otro Tenant');
                console.error('   3. App eliminada o deshabilitada');
                console.error('   4. Permisos de consentimiento faltantes');
                
            } else if (error.message.includes('AADSTS50020')) {
                console.error('üìã ERROR AADSTS50020 - Usuario no existe en tenant');
                console.error('   Verifica que uses el tenant correcto');
            } else if (error.message.includes('AADSTS90002')) {
                console.error('üìã ERROR AADSTS90002 - Tenant no encontrado');
                console.error('   Verifica que el Tenant ID sea v√°lido');
            }
            
            console.error('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
            
            // ‚úÖ GENERAR REPORTE DE DIAGN√ìSTICO
            await generateDiagnosticReport();
        }
        
        // Responder al usuario
        try {
            await context.sendActivity(
                '‚ùå **Error de autenticaci√≥n del bot**\n\n' +
                'Hay un problema con la configuraci√≥n de Azure AD. ' +
                'Por favor contacta al administrador del sistema.\n\n' +
                '**Error t√©cnico**: ' + (error.message.includes('openID') ? 
                    'OpenID Config no encontrada - Tenant ID inv√°lido' : 
                    'Error de autenticaci√≥n Azure AD')
            );
        } catch (sendError) {
            console.error('Error enviando mensaje de error:', sendError);
        }
        
        // Limpiar estados en caso de error
        try {
            if (conversationState) {
                await conversationState.delete(context);
            }
            if (userState) {
                await userState.delete(context);
            }
        } catch (cleanupError) {
            console.error('‚ö†Ô∏è Error limpiando estados:', cleanupError.message);
        }
    };
}

// ‚úÖ FUNCI√ìN DE DIAGN√ìSTICO COMPLETO
async function generateDiagnosticReport() {
    console.log('\nüìä ===== REPORTE DE DIAGN√ìSTICO AZURE AD =====');
    
    const report = {
        timestamp: new Date().toISOString(),
        configuration: {
            appId: appId,
            hasAppPassword: !!appPassword,
            tenantId: tenantId,
            nodeVersion: process.version,
            environment: process.env.NODE_ENV || 'development'
        },
        endpoints: {
            oauthEndpoint: `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token`,
            openIdMetadata: `https://login.microsoftonline.com/${tenantId}/v2.0/.well-known/openid_configuration`,
            azurePortalApp: `https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/${appId}/isMSAApp/`
        },
        recommendations: [
            'Verifica que la aplicaci√≥n existe en Azure Portal',
            'Confirma que el Tenant ID es correcto',
            'Aseg√∫rate de que la app tiene permisos de Bot Framework',
            'Verifica que no haya sido eliminada la aplicaci√≥n'
        ]
    };
    
    console.log('üìã Configuraci√≥n actual:');
    console.log(JSON.stringify(report.configuration, null, 2));
    
    console.log('\nüîó Enlaces √∫tiles:');
    console.log(`   Azure Portal App: ${report.endpoints.azurePortalApp}`);
    console.log(`   OAuth Endpoint: ${report.endpoints.oauthEndpoint}`);
    
    console.log('\nüìù Recomendaciones:');
    report.recommendations.forEach((rec, index) => {
        console.log(`   ${index + 1}. ${rec}`);
    });
    
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n');
    
    return report;
}

// ‚úÖ INICIALIZACI√ìN ASYNC DEL BOT
initializeBot().then(() => {
    console.log('üéâ Inicializaci√≥n completada exitosamente');
}).catch(error => {
    console.error('üí• Error cr√≠tico inicializando bot:', error);
    process.exit(1);
});

// ‚úÖ ENDPOINTS DE SALUD Y DIAGN√ìSTICO
server.get('/health', (req, res, next) => {
    try {
        const cosmosInfo = cosmosService.getConfigInfo();
        const documentInfo = documentService.getConfigInfo();
        
        res.json({
            status: 'OK',
            timestamp: new Date().toISOString(),
            bot: 'Nova Bot con Diagn√≥stico Azure AD',
            azureAdConfig: {
                appId: appId ? 'Configurado' : 'Faltante',
                appPassword: appPassword ? 'Configurado' : 'Faltante',
                tenantId: tenantId ? 'Configurado' : 'FALTANTE - CR√çTICO',
                tenantValue: tenantId || 'none',
                channelAuthTenant: tenantId ? 'Configurado' : 'FALTANTE',
                oauthEndpoint: tenantId ? `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token` : 'No configurado'
            },
            diagnosticUrls: {
                azurePortalApp: appId ? `https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/${appId}/isMSAApp/` : 'No disponible',
                azureTenant: tenantId ? `https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Properties/directoryId/${tenantId}` : 'No disponible'
            },
            features: {
                customLogin: true,
                oauth: false,
                azure: true,
                openai: !!process.env.OPENAI_API_KEY,
                cosmosDB: cosmosInfo.available,
                azureSearch: documentInfo.searchAvailable,
                persistencia: cosmosInfo.available ? 'Cosmos DB' : 'Memoria temporal',
                documentSearch: documentInfo.searchAvailable ? 'Azure Search con vectores' : 'No disponible'
            },
            storage: {
                type: cosmosInfo.available ? 'CosmosDB' : 'Memory',
                database: cosmosInfo.database,
                container: cosmosInfo.container,
                available: cosmosInfo.available,
                error: cosmosInfo.error
            },
            documentService: {
                available: documentInfo.searchAvailable,
                features: documentInfo.features,
                indexName: documentInfo.indexName,
                error: documentInfo.error
            }
        });
        return next();
    } catch (error) {
        console.error('‚ùå Error en endpoint /health:', error);
        res.status(500).json({ error: 'Internal server error' });
        return next();
    }
});

// ‚úÖ ENDPOINT DE DIAGN√ìSTICO AZURE AD ESPEC√çFICO
server.get('/azure-diagnostic', async (req, res) => {
    try {
        console.log('üìä Ejecutando diagn√≥stico Azure AD...');
        
        const diagnosticReport = await generateDiagnosticReport();
        
        // ‚úÖ AGREGAR VERIFICACI√ìN DE OPENID ENDPOINT
        if (tenantId) {
            try {
                const openIdUrl = `https://login.microsoftonline.com/${tenantId}/v2.0/.well-known/openid_configuration`;
                const openIdResponse = await axios.get(openIdUrl, { 
                    timeout: 10000,
                    validateStatus: (status) => status < 500
                });
                
                diagnosticReport.openIdTest = {
                    url: openIdUrl,
                    status: openIdResponse.status,
                    accessible: openIdResponse.status === 200,
                    issuer: openIdResponse.data?.issuer || 'Unknown'
                };
                
                if (openIdResponse.status === 200) {
                    console.log('‚úÖ OpenID config accesible');
                } else {
                    console.error(`‚ùå OpenID config error: ${openIdResponse.status}`);
                }
                
            } catch (openIdError) {
                diagnosticReport.openIdTest = {
                    url: `https://login.microsoftonline.com/${tenantId}/v2.0/.well-known/openid_configuration`,
                    status: openIdError.response?.status || 0,
                    accessible: false,
                    error: openIdError.message,
                    recommendation: openIdError.response?.status === 404 ? 
                        'Tenant ID es incorrecto o no existe' : 
                        'Problema de conectividad'
                };
                console.error(`‚ùå Error probando OpenID: ${openIdError.message}`);
            }
        } else {
            diagnosticReport.openIdTest = {
                accessible: false,
                error: 'No Tenant ID configured',
                recommendation: 'Configure MicrosoftAppTenantId en .env'
            };
        }
        
        res.json(diagnosticReport);
    } catch (error) {
        console.error('‚ùå Error en endpoint /azure-diagnostic:', error);
        res.status(500).json({ 
            error: 'Error generating diagnostic report',
            details: error.message 
        });
    }
});

// ‚úÖ ENDPOINT: Diagn√≥stico completo
server.get('/diagnostic', async (req, res) => {
    try {
        let cosmosStats = null;
        if (cosmosService.isAvailable()) {
            try {
                cosmosStats = await cosmosService.getStats();
            } catch (error) {
                console.warn('‚ö†Ô∏è Error obteniendo stats de Cosmos DB:', error.message);
            }
        }

        let documentStats = null;
        if (documentService.isAvailable()) {
            try {
                documentStats = await documentService.getStats();
            } catch (error) {
                console.warn('‚ö†Ô∏è Error obteniendo stats de DocumentService:', error.message);
            }
        }
        
        res.json({
            bot: {
                status: 'running',
                authenticatedUsers: global.botInstance?.getStats?.()?.authenticatedUsers || 0,
                timestamp: new Date().toISOString()
            },
            azureAD: {
                configured: !!tenantId,
                appId: appId,
                tenantId: tenantId,
                hasPassword: !!appPassword,
                oauthEndpoint: tenantId ? `https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/token` : null,
                portalUrl: appId ? `https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/${appId}/isMSAApp/` : null
            },
            memory: {
                used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + ' MB',
                total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024) + ' MB'
            },
            uptime: Math.round(process.uptime()) + ' segundos',
            environment: {
                hasOpenAI: !!process.env.OPENAI_API_KEY,
                hasBotId: !!process.env.MicrosoftAppId,
                hasTenantId: !!process.env.MicrosoftAppTenantId,
                nodeVersion: process.version,
                cosmosConfigured: !!process.env.COSMOS_DB_ENDPOINT,
                azureSearchConfigured: !!(process.env.AZURE_SEARCH_ENDPOINT || process.env.SERVICE_ENDPOINT)
            },
            botFramework: {
                appId: process.env.MicrosoftAppId ? 'Configurado' : 'Faltante',
                appPassword: process.env.MicrosoftAppPassword ? 'Configurado' : 'Faltante',
                tenantId: process.env.MicrosoftAppTenantId ? 'Configurado' : 'FALTANTE - CAUSA AADSTS700016',
                tenantValue: process.env.MicrosoftAppTenantId || 'No configurado - CR√çTICO'
            },
            storage: {
                type: cosmosService.isAvailable() ? 'CosmosDB' : 'Memory',
                config: cosmosService.getConfigInfo(),
                stats: cosmosStats
            },
            documentService: {
                type: documentService.isAvailable() ? 'Azure Search' : 'Not Available',
                config: documentService.getConfigInfo(),
                stats: documentStats
            }
        });
    } catch (error) {
        console.error('‚ùå Error en endpoint /diagnostic:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// ‚úÖ ENDPOINT: Stats de Cosmos DB
server.get('/cosmos-stats', async (req, res) => {
    try {
        if (!cosmosService.isAvailable()) {
            res.json({
                available: false,
                message: 'Cosmos DB no est√° configurado o disponible'
            });
            return;
        }
        
        const stats = await cosmosService.getStats();
        res.json(stats);
        return;
        
    } catch (error) {
        console.error('‚ùå Error en endpoint /cosmos-stats:', error);
        res.status(500).json({ 
            error: 'Error obteniendo estad√≠sticas de Cosmos DB',
            details: error.message 
        });
        return;
    }
});

// ‚úÖ DESARROLLO: Endpoint de limpieza (solo en desarrollo)
if (process.env.NODE_ENV === 'development') {
    server.post('/dev/cleanup', async (req, res) => {
        try {
            console.log('üßπ Iniciando limpieza de desarrollo...');
            
            let results = {
                memory_cleared: false,
                cosmos_available: cosmosService.isAvailable()
            };
            
            if (global.botInstance && typeof global.botInstance.cleanup === 'function') {
                global.botInstance.cleanup();
                results.memory_cleared = true;
            }
            
            console.log('‚úÖ Limpieza de desarrollo completada');
            
            res.json({
                success: true,
                message: 'Limpieza de desarrollo completada',
                results: results,
                timestamp: new Date().toISOString()
            });
            
            return;
            
        } catch (error) {
            console.error('‚ùå Error en limpieza de desarrollo:', error);
            res.status(500).json({ 
                error: 'Error en limpieza',
                details: error.message 
            });
            return;
        }
    });
}

// Manejo de cierre graceful
process.on('SIGINT', () => {
    console.log('\nüõë Cerrando bot Nova...');
    console.log('üíæ Guardando estados finales...');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüõë Terminando bot Nova...');
    console.log('üíæ Finalizando conexiones...');
    process.exit(0);
});

// ‚úÖ INFORMACI√ìN FINAL CON DIAGN√ìSTICO AZURE AD
console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log('üìã CONFIGURACI√ìN NOVA BOT - DIAGN√ìSTICO COMPLETO');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

console.log('üîê Azure AD Bot Framework:');
console.log(`   App ID: ${appId ? '‚úÖ Configurado' : '‚ùå FALTANTE'}`);
console.log(`   App Password: ${appPassword ? '‚úÖ Configurado' : '‚ùå FALTANTE'}`);
console.log(`   Tenant ID: ${tenantId ? '‚úÖ Configurado' : '‚ùå FALTANTE - CAUSA AADSTS700016'}`);
console.log(`   Channel Auth Tenant: ${tenantId ? '‚úÖ Configurado' : '‚ùå FALTANTE'}`);

if (appId) {
    console.log(`   Azure Portal: https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/${appId}/isMSAApp/`);
}

console.log('ü§ñ Login: Tarjeta personalizada con usuario/contrase√±a');
console.log('üåê API Nova: https://pruebas.nova.com.mx/ApiRestNova/api/Auth/login');
console.log('ü§ñ OpenAI: ' + (process.env.OPENAI_API_KEY ? '‚úÖ Configurado' : '‚ùå No configurado'));

// Informaci√≥n de servicios
if (process.env.COSMOS_DB_ENDPOINT) {
    console.log('üíæ Cosmos DB: ‚úÖ Configurado');
    console.log(`   Estado: ${cosmosService.isAvailable() ? 'üü¢ Disponible' : 'üî¥ Error de conexi√≥n'}`);
} else {
    console.log('üíæ Cosmos DB: ‚ùå No configurado (usando MemoryStorage)');
}

const searchEndpoint = process.env.AZURE_SEARCH_ENDPOINT || process.env.SERVICE_ENDPOINT;
if (searchEndpoint) {
    console.log('üîç Azure Search: ‚úÖ Configurado');
    console.log(`   Estado: ${documentService.isAvailable() ? 'üü¢ Disponible' : 'üî¥ Error de conexi√≥n'}`);
} else {
    console.log('üîç Azure Search: ‚ùå No configurado');
}

console.log('üìä Endpoints disponibles:');
console.log('   GET /health - Estado general');
console.log('   GET /diagnostic - Diagn√≥stico completo');
console.log('   GET /azure-diagnostic - Diagn√≥stico espec√≠fico Azure AD');
console.log('   GET /cosmos-stats - Estad√≠sticas Cosmos DB');

console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

// ‚úÖ VALIDACI√ìN FINAL CR√çTICA
if (!tenantId) {
    console.error('\nüö® CONFIGURACI√ìN INCOMPLETA - BOT NO FUNCIONAR√Å');
    console.error('El error AADSTS700016 seguir√° ocurriendo sin MicrosoftAppTenantId');
    console.error('Agrega el Tenant ID al archivo .env y reinicia el bot');
} else {
    console.log('\n‚úÖ CONFIGURACI√ìN AZURE AD COMPLETA - Bot listo para funcionar\n');
}