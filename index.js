// index.js - CORREGIDO con Tenant ID
const path = require('path');
const restify = require('restify');
const { 
    BotFrameworkAdapter, 
    MemoryStorage, 
    ConversationState, 
    UserState, 
    CosmosDbPartitionedStorage,
    AuthenticationConfiguration // ‚úÖ IMPORTANTE para tenant ID
} = require('botbuilder');

// Importar servicios
const { TeamsBot } = require('./bots/teamsBot');
const cosmosService = require('./services/cosmosService');
const documentService = require('./services/documentService');

// Configurar variables de entorno
require('dotenv').config();

// ‚úÖ VALIDACI√ìN: Variables cr√≠ticas para Bot Framework
const requiredVars = ['MicrosoftAppId', 'MicrosoftAppPassword'];
const missingVars = requiredVars.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
    console.error('‚ùå Variables de entorno cr√≠ticas faltantes:');
    missingVars.forEach(varName => console.error(`   ${varName}`));
    process.exit(1);
}

// ‚úÖ ADVERTENCIA: Tenant ID recomendado
if (!process.env.MicrosoftAppTenantId) {
    console.warn('‚ö†Ô∏è MicrosoftAppTenantId no configurado - puede causar errores de autenticaci√≥n');
    console.warn('   Agrega MicrosoftAppTenantId a tu archivo .env');
}

// Crear servidor HTTP
const server = restify.createServer();
server.use(restify.plugins.bodyParser());

server.listen(process.env.port || process.env.PORT || 3978, () => {
    console.log(`\n${server.name} listening on ${server.url}`);
    console.log('\nüöÄ Bot Nova con Cosmos DB iniciado');
    console.log('‚úÖ Sistema de login personalizado activo');
    console.log(`üíæ Persistencia: ${cosmosService.isAvailable() ? 'Cosmos DB' : 'Memoria temporal'}`);
});

// ‚úÖ CORREGIDO: Crear adaptador del Bot Framework con Tenant ID
const adapterConfig = {
    appId: process.env.MicrosoftAppId,
    appPassword: process.env.MicrosoftAppPassword
};

// ‚úÖ NUEVO: Agregar Tenant ID si est√° disponible
if (process.env.MicrosoftAppTenantId) {
    // Opci√≥n 1: Usar AuthenticationConfiguration (recomendado)
    adapterConfig.authConfig = new AuthenticationConfiguration([], {
        requiredEndorsements: [],
        claimsValidation: {},
        tenantId: process.env.MicrosoftAppTenantId
    });
    
    console.log(`üîê Tenant ID configurado: ${process.env.MicrosoftAppTenantId}`);
} else {
    console.warn('‚ö†Ô∏è Tenant ID no configurado - usando configuraci√≥n b√°sica');
}

const adapter = new BotFrameworkAdapter(adapterConfig);

// ‚úÖ MEJORADO: Manejo de errores del adaptador con informaci√≥n de Tenant
adapter.onTurnError = async (context, error) => {
    console.error('‚ùå Error en bot:', error);
    
    // ‚úÖ DIAGN√ìSTICO: Errores espec√≠ficos de autenticaci√≥n
    if (error.message && error.message.includes('AADSTS')) {
        console.error('üîê Error de autenticaci√≥n Azure AD detectado:');
        console.error('   Posibles causas:');
        console.error('   ‚Ä¢ Tenant ID incorrecto o faltante');
        console.error('   ‚Ä¢ App no registrada en el tenant correcto'); 
        console.error('   ‚Ä¢ Permisos insuficientes en Azure AD');
        console.error(`   ‚Ä¢ Verificar configuraci√≥n: AppId=${process.env.MicrosoftAppId?.substring(0,8)}...`);
        console.error(`   ‚Ä¢ Tenant configurado: ${process.env.MicrosoftAppTenantId || 'NO CONFIGURADO'}`);
    }
    
    await context.sendActivity('‚ùå **Error del bot**\n\nOcurri√≥ un error inesperado. Intenta nuevamente.');
    
    // Limpiar estados en caso de error
    try {
        if (conversationState) {
            await conversationState.delete(context);
        }
        if (userState) {
            await userState.delete(context);
        }
    } catch (cleanupError) {
        console.error('‚ö†Ô∏è Error limpiando estados:', cleanupError.message);
    }
};

// ===== RESTO DEL C√ìDIGO MANTENER IGUAL =====

// Inicializar almacenamiento
let storage;
let conversationState;
let userState;

async function initializeStorage() {
    console.log('üì¶ Inicializando almacenamiento...');
    
    try {
        if (cosmosService.isAvailable()) {
            console.log('üåê Configurando Cosmos DB Storage...');
            
            storage = new CosmosDbPartitionedStorage({
                cosmosDbEndpoint: process.env.COSMOS_DB_ENDPOINT,
                authKey: process.env.COSMOS_DB_KEY,
                databaseId: process.env.COSMOS_DB_DATABASE_ID,
                containerId: process.env.COSMOS_DB_CONTAINER_ID,
                compatibilityMode: false
            });
            
            console.log('‚úÖ Cosmos DB Storage configurado exitosamente');
            
        } else {
            console.warn('‚ö†Ô∏è Cosmos DB no disponible, usando MemoryStorage como fallback');
            storage = new MemoryStorage();
        }
        
        conversationState = new ConversationState(storage);
        userState = new UserState(storage);
        
        console.log(`‚úÖ Estados inicializados con ${cosmosService.isAvailable() ? 'Cosmos DB' : 'MemoryStorage'}`);
        
    } catch (error) {
        console.error('‚ùå Error inicializando Cosmos DB, usando MemoryStorage:', error.message);
        storage = new MemoryStorage();
        conversationState = new ConversationState(storage);
        userState = new UserState(storage);
        console.log('‚úÖ MemoryStorage configurado como fallback');
    }
}

// Inicializaci√≥n async del storage
initializeStorage().then(() => {
    const bot = new TeamsBot(conversationState, userState);
    
    server.post('/api/messages', async (req, res) => {
        try {
            await adapter.process(req, res, (context) => bot.run(context));
        } catch (error) {
            console.error('‚ùå Error procesando mensaje:', error);
            res.status(500).send('Error interno del servidor');
        }
    });
    
    console.log('üéØ Bot listo para recibir mensajes');
    
}).catch(error => {
    console.error('üí• Error cr√≠tico inicializando bot:', error);
    process.exit(1);
});

// ‚úÖ MEJORADO: Endpoint de salud con informaci√≥n de configuraci√≥n
server.get('/health', (req, res, next) => {
    try {
        const cosmosInfo = cosmosService.getConfigInfo();
        const documentInfo = documentService.getConfigInfo();
        
        res.json({
            status: 'OK',
            timestamp: new Date().toISOString(),
            bot: 'Nova Bot con Cosmos DB y Azure Search',
            configuration: {
                appId: process.env.MicrosoftAppId ? 'Configurado' : 'Faltante',
                appPassword: process.env.MicrosoftAppPassword ? 'Configurado' : 'Faltante',
                tenantId: process.env.MicrosoftAppTenantId ? 'Configurado' : 'NO CONFIGURADO ‚ö†Ô∏è',
                tenantValue: process.env.MicrosoftAppTenantId || 'none'
            },
            features: {
                customLogin: true,
                oauth: false,
                azure: false,
                openai: !!process.env.OPENAI_API_KEY,
                cosmosDB: cosmosInfo.available,
                azureSearch: documentInfo.searchAvailable,
                persistencia: cosmosInfo.available ? 'Cosmos DB' : 'Memoria temporal',
                documentSearch: documentInfo.searchAvailable ? 'Azure Search con vectores' : 'No disponible'
            },
            storage: {
                type: cosmosInfo.available ? 'CosmosDB' : 'Memory',
                database: cosmosInfo.database,
                container: cosmosInfo.container,
                available: cosmosInfo.available,
                error: cosmosInfo.error
            },
            documentService: {
                available: documentInfo.searchAvailable,
                features: documentInfo.features,
                indexName: documentInfo.indexName,
                error: documentInfo.error
            }
        });
        return next();
    } catch (error) {
        console.error('‚ùå Error en endpoint /health:', error);
        res.status(500).json({ error: 'Internal server error' });
        return next();
    }
});

// ===== MANTENER RESTO DE ENDPOINTS IGUAL =====

server.get('/diagnostic', async (req, res) => {
    try {
        let cosmosStats = null;
        if (cosmosService.isAvailable()) {
            try {
                cosmosStats = await cosmosService.getStats();
            } catch (error) {
                console.warn('‚ö†Ô∏è Error obteniendo stats de Cosmos DB:', error.message);
            }
        }

        let documentStats = null;
        if (documentService.isAvailable()) {
            try {
                documentStats = await documentService.getStats();
            } catch (error) {
                console.warn('‚ö†Ô∏è Error obteniendo stats de DocumentService:', error.message);
            }
        }
        
        res.json({
            bot: {
                status: 'running',
                authenticatedUsers: global.botInstance?.getStats?.()?.authenticatedUsers || 0,
                timestamp: new Date().toISOString()
            },
            memory: {
                used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024) + ' MB',
                total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024) + ' MB'
            },
            uptime: Math.round(process.uptime()) + ' segundos',
            environment: {
                hasOpenAI: !!process.env.OPENAI_API_KEY,
                hasBotId: !!process.env.MicrosoftAppId,
                hasTenantId: !!process.env.MicrosoftAppTenantId, // ‚úÖ NUEVO
                nodeVersion: process.version,
                cosmosConfigured: !!process.env.COSMOS_DB_ENDPOINT,
                azureSearchConfigured: !!(process.env.AZURE_SEARCH_ENDPOINT || process.env.SERVICE_ENDPOINT)
            },
            botFramework: { // ‚úÖ NUEVO
                appId: process.env.MicrosoftAppId ? 'Configurado' : 'Faltante',
                appPassword: process.env.MicrosoftAppPassword ? 'Configurado' : 'Faltante',
                tenantId: process.env.MicrosoftAppTenantId ? 'Configurado' : 'Faltante',
                tenantValue: process.env.MicrosoftAppTenantId || 'No configurado'
            },
            storage: {
                type: cosmosService.isAvailable() ? 'CosmosDB' : 'Memory',
                config: cosmosService.getConfigInfo(),
                stats: cosmosStats
            },
            documentService: {
                type: documentService.isAvailable() ? 'Azure Search' : 'Not Available',
                config: documentService.getConfigInfo(),
                stats: documentStats
            }
        });
    } catch (error) {
        console.error('‚ùå Error en endpoint /diagnostic:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// ===== MANTENER RESTO DEL C√ìDIGO =====

process.on('SIGINT', () => {
    console.log('\nüõë Cerrando bot Nova...');
    console.log('üíæ Guardando estados finales...');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüõë Terminando bot Nova...');
    console.log('üíæ Finalizando conexiones...');
    process.exit(0);
});

// ‚úÖ MEJORADO: Informaci√≥n de configuraci√≥n con Tenant ID
console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log('üìã CONFIGURACI√ìN NOVA BOT');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log('üîê Login: Tarjeta personalizada con usuario/contrase√±a');
console.log('üåê API Nova: https://pruebas.nova.com.mx/ApiRestNova/api/Auth/login');
console.log('ü§ñ OpenAI: ' + (process.env.OPENAI_API_KEY ? '‚úÖ Configurado' : '‚ùå No configurado'));

// ‚úÖ INFORMACI√ìN DE BOT FRAMEWORK
console.log('üîê Bot Framework:');
console.log(`   App ID: ${process.env.MicrosoftAppId ? '‚úÖ Configurado' : '‚ùå FALTANTE'}`);
console.log(`   App Password: ${process.env.MicrosoftAppPassword ? '‚úÖ Configurado' : '‚ùå FALTANTE'}`);
console.log(`   Tenant ID: ${process.env.MicrosoftAppTenantId ? '‚úÖ Configurado' : '‚ö†Ô∏è NO CONFIGURADO'}`);

if (process.env.MicrosoftAppTenantId) {
    console.log(`   Tenant: ${process.env.MicrosoftAppTenantId}`);
} else {
    console.log('   ‚ö†Ô∏è ADVERTENCIA: Sin Tenant ID pueden ocurrir errores AADSTS700016');
}

// Informaci√≥n de Cosmos DB
if (process.env.COSMOS_DB_ENDPOINT) {
    console.log('üíæ Cosmos DB: ‚úÖ Configurado');
    console.log(`   Database: ${process.env.COSMOS_DB_DATABASE_ID || 'No especificado'}`);
    console.log(`   Container: ${process.env.COSMOS_DB_CONTAINER_ID || 'No especificado'}`);
    console.log(`   Estado: ${cosmosService.isAvailable() ? 'üü¢ Disponible' : 'üî¥ Error de conexi√≥n'}`);
} else {
    console.log('üíæ Cosmos DB: ‚ùå No configurado (usando MemoryStorage)');
}

const searchEndpoint = process.env.AZURE_SEARCH_ENDPOINT || process.env.SERVICE_ENDPOINT;
if (searchEndpoint) {
    console.log('üîç Azure Search: ‚úÖ Configurado');
    console.log(`   Endpoint: ${searchEndpoint}`);
    console.log(`   Index: ${process.env.AZURE_SEARCH_INDEX_NAME || process.env.INDEX_NAME || 'alfa_bot'}`);
    console.log(`   Estado: ${documentService.isAvailable() ? 'üü¢ Disponible' : 'üî¥ Error de conexi√≥n'}`);
    
    if (documentService.isAvailable()) {
        const features = documentService.getConfigInfo().features;
        console.log(`   B√∫squeda vectorial: ${features.vectorSearch ? '‚úÖ Activa' : '‚ö†Ô∏è Solo texto'}`);
    }
} else {
    console.log('üîç Azure Search: ‚ùå No configurado (b√∫squeda de documentos no disponible)');
}

console.log('üìä Herramientas disponibles:');
console.log('   ‚Ä¢ Consulta de tasas de inter√©s Nova');
console.log('   ‚Ä¢ Informaci√≥n de usuario completa');
console.log('   ‚Ä¢ APIs Nova con token de usuario');
console.log('   ‚Ä¢ Resumen de conversaciones');
if (documentService.isAvailable()) {
    console.log('   ‚Ä¢ B√∫squeda de documentos corporativos');
    console.log('   ‚Ä¢ Consulta de pol√≠ticas empresariales');
    console.log('   ‚Ä¢ Calendario de d√≠as feriados');
}
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');

// ‚úÖ VALIDACI√ìN FINAL: Advertencias cr√≠ticas
const criticalMissing = [];
if (!process.env.MicrosoftAppId) criticalMissing.push('MicrosoftAppId');
if (!process.env.MicrosoftAppPassword) criticalMissing.push('MicrosoftAppPassword');

if (criticalMissing.length > 0) {
    console.error('\nüö® CONFIGURACI√ìN CR√çTICA FALTANTE:');
    criticalMissing.forEach(varName => console.error(`   ‚ùå ${varName}`));
    console.error('\n   El bot NO funcionar√° sin estas variables.\n');
}

if (!process.env.MicrosoftAppTenantId) {
    console.warn('\n‚ö†Ô∏è  TENANT ID NO CONFIGURADO:');
    console.warn('   Esto puede causar errores AADSTS700016');
    console.warn('   Agrega MicrosoftAppTenantId a tu .env');
    console.warn('   Obt√©n el Tenant ID desde Azure Portal > Azure AD > Properties\n');
}