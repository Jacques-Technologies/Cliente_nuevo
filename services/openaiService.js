// services/openaiService.js
// OpenAI Service COMPLETO CORREGIDO con Cosmos DB y mejores formatos
const OpenAI = require('openai');
const { DateTime } = require('luxon');
const axios = require('axios');
const { CardFactory } = require('botbuilder');
const cosmosService = require('./cosmosService');
const documentService = require('./documentService');
require('dotenv').config();

/**
 * Servicio OpenAI mejorado con persistencia en Cosmos DB y formato corregido
 */
class OpenAIService {
    constructor() {
        this.initialized = false;
        this.initializationError = null;
        
        console.log('üöÄ Inicializando OpenAI Service con Cosmos DB...');
        this.diagnoseConfiguration();
        this.initializeOpenAI();
        this.tools = this.defineTools();
        
        console.log(`‚úÖ OpenAI Service inicializado - Disponible: ${this.openaiAvailable}`);
    }

    /**
     * ‚úÖ CORREGIDO: B√∫squeda de documentos con mejor integraci√≥n
     */
    async buscarDocumentos(consulta, userInfo) {
        try {
            const userId = userInfo?.usuario || 'unknown';
            console.log(`üìñ [${userId}] Iniciando b√∫squeda de documentos: "${consulta}"`);

            // ‚úÖ VERIFICACI√ìN MEJORADA: Estado del servicio
            if (!documentService.isAvailable()) {
                console.warn(`‚ö†Ô∏è [${userId}] DocumentService no disponible`);
                
                const configInfo = documentService.getConfigInfo();
                console.log(`üìä Estado del servicio:`, {
                    searchAvailable: configInfo.searchAvailable,
                    error: configInfo.error,
                    endpoint: configInfo.endpoint,
                    indexName: configInfo.indexName
                });

                return `‚ö†Ô∏è **Servicio de b√∫squeda no disponible**\n\n` +
                       `**Estado**: ${configInfo.error || 'No configurado'}\n\n` +
                       `**Para habilitar b√∫squeda de documentos:**\n` +
                       `‚Ä¢ Configurar Azure Search en las variables de entorno\n` +
                       `‚Ä¢ Verificar conectividad con el servicio\n` +
                       `‚Ä¢ Contactar al administrador del sistema\n\n` +
                       `**Funciones disponibles:**\n` +
                       `‚Ä¢ Consulta de tasas: \`tasas 2025\`\n` +
                       `‚Ä¢ Informaci√≥n personal: \`mi info\`\n` +
                       `‚Ä¢ Chat general con IA`;
            }

            // ‚úÖ B√öSQUEDA MEJORADA: Con logging detallado
            console.log(`üîç [${userId}] DocumentService disponible, ejecutando b√∫squeda...`);
            
            // Llamar al m√©todo de b√∫squeda del DocumentService
            const resultado = await documentService.buscarDocumentos(consulta, userId);
            
            console.log(`üìä [${userId}] B√∫squeda completada, resultado obtenido`);
            
            // ‚úÖ VALIDACI√ìN: Verificar que obtuvimos resultado v√°lido
            if (!resultado || typeof resultado !== 'string') {
                console.warn(`‚ö†Ô∏è [${userId}] Resultado inv√°lido de DocumentService:`, typeof resultado);
                return `‚ùå **Error en b√∫squeda**: No se obtuvo resultado v√°lido del servicio de documentos`;
            }

            // ‚úÖ DETECCI√ìN: Si no se encontraron documentos espec√≠ficos
            if (resultado.includes('No se encontraron documentos') || 
                resultado.includes('‚ùå No se encontraron')) {
                
                console.log(`üí° [${userId}] No se encontraron documentos, ofreciendo alternativas`);
                
                // Para el caso espec√≠fico de "ajustes.docx"
                if (consulta.toLowerCase().includes('ajustes.docx') || 
                    consulta.toLowerCase().includes('ajustes')) {
                    
                    return `üîç **B√∫squeda: "${consulta}"**\n\n` +
                           `‚ùå **Documento "ajustes.docx" no encontrado**\n\n` +
                           `**Posibles causas:**\n` +
                           `‚Ä¢ El archivo no est√° indexado en Azure Search\n` +
                           `‚Ä¢ El documento no existe en el sistema\n` +
                           `‚Ä¢ El nombre del archivo es diferente\n\n` +
                           `**Alternativas de b√∫squeda:**\n` +
                           `‚Ä¢ Busca por contenido: "configuraci√≥n sistema"\n` +
                           `‚Ä¢ Busca por tema: "ajustes configuraci√≥n"\n` +
                           `‚Ä¢ Busca documentos similares: "par√°metros sistema"\n\n` +
                           `**Otras opciones:**\n` +
                           `‚Ä¢ \`buscar pol√≠ticas\` - Ver pol√≠ticas corporativas\n` +
                           `‚Ä¢ \`obtener feriados\` - Consultar d√≠as feriados\n` +
                           `‚Ä¢ Describir qu√© informaci√≥n necesitas del documento`;
                }
            }

            // ‚úÖ √âXITO: Retornar resultado de la b√∫squeda
            console.log(`‚úÖ [${userId}] B√∫squeda exitosa, retornando resultado`);
            return resultado;

        } catch (error) {
            const userId = userInfo?.usuario || 'unknown';
            console.error(`‚ùå [${userId}] Error en b√∫squeda de documentos:`, error);
            
            // ‚úÖ DIAGN√ìSTICO: Informaci√≥n detallada del error
            let errorMessage = `‚ùå **Error buscando documentos**\n\n`;
            errorMessage += `**Consulta**: "${consulta}"\n`;
            errorMessage += `**Error**: ${error.message}\n\n`;
            
            // ‚úÖ CLASIFICACI√ìN: Tipo de error
            if (error.message.includes('ENOTFOUND') || error.message.includes('getaddrinfo')) {
                errorMessage += `**Tipo**: Error de conectividad con Azure Search\n`;
                errorMessage += `**Soluci√≥n**: Verificar configuraci√≥n de red y endpoint\n`;
            } else if (error.message.includes('403') || error.message.includes('Forbidden')) {
                errorMessage += `**Tipo**: Error de permisos\n`;
                errorMessage += `**Soluci√≥n**: Verificar API Key de Azure Search\n`;
            } else if (error.message.includes('404') || error.message.includes('Not Found')) {
                errorMessage += `**Tipo**: Servicio o √≠ndice no encontrado\n`;
                errorMessage += `**Soluci√≥n**: Verificar endpoint e √≠ndice en Azure Search\n`;
            } else {
                errorMessage += `**Tipo**: Error interno del servicio\n`;
                errorMessage += `**Soluci√≥n**: Contactar soporte t√©cnico\n`;
            }
            
            errorMessage += `\n**Funciones disponibles:**\n`;
            errorMessage += `‚Ä¢ Consulta de tasas: \`tasas 2025\`\n`;
            errorMessage += `‚Ä¢ Informaci√≥n personal: \`mi info\`\n`;
            errorMessage += `‚Ä¢ Chat general con IA`;
            
            return errorMessage;
        }
    }

    /**
     * ‚úÖ NUEVO: Buscar pol√≠ticas espec√≠ficas
     */
    async buscarPoliticas(tipoPolitica, userInfo) {
        try {
            if (!documentService.isAvailable()) {
                return `‚ö†Ô∏è **Servicio de pol√≠ticas no disponible**\n\n` +
                       `No se puede acceder a las pol√≠ticas corporativas en este momento.`;
            }

            const userId = userInfo?.usuario || 'unknown';
            console.log(`üìã [${userId}] Buscando pol√≠tica: ${tipoPolitica}`);

            const resultado = await documentService.buscarPoliticas(tipoPolitica, userId);
            
            return `üìã **Pol√≠tica: ${tipoPolitica.charAt(0).toUpperCase() + tipoPolitica.slice(1)}**\n\n${resultado}`;

        } catch (error) {
            console.error('‚ùå Error buscando pol√≠ticas:', error);
            return `‚ùå **Error buscando pol√≠tica de ${tipoPolitica}**: ${error.message}`;
        }
    }

    /**
     * ‚úÖ NUEVO: Obtener d√≠as feriados
     */
    async obtenerDiasFeriados(anio, userInfo) {
        try {
            if (!documentService.isAvailable()) {
                return `‚ö†Ô∏è **Informaci√≥n de feriados no disponible**\n\n` +
                       `No se puede acceder al calendario de d√≠as feriados.`;
            }

            const userId = userInfo?.usuario || 'unknown';
            const a√±oConsulta = anio || new Date().getFullYear();
            console.log(`üìÖ [${userId}] Obteniendo feriados para ${a√±oConsulta}`);

            const resultado = await documentService.obtenerDiasFeriados(a√±oConsulta, userId);
            
            return `üìÖ **D√≠as Feriados ${a√±oConsulta}**\n\n${resultado}`;

        } catch (error) {
            console.error('‚ùå Error obteniendo feriados:', error);
            return `‚ùå **Error obteniendo feriados para ${anio || 'a√±o actual'}**: ${error.message}`;
        }
    }

    /**
     * ‚úÖ MEJORADO: Diagn√≥stico m√°s completo
     */
    diagnoseConfiguration() {
        console.log('üîç Diagnosticando configuraci√≥n OpenAI...');
        
        const config = {
            apiKey: process.env.OPENAI_API_KEY,
            organization: process.env.OPENAI_ORGANIZATION || null,
            baseURL: process.env.OPENAI_BASE_URL || 'https://api.openai.com/v1'
        };

        console.log('üìä Estado de configuraci√≥n:');
        console.log(`   API Key: ${config.apiKey ? '‚úÖ Configurada' : '‚ùå Faltante'}`);
        console.log(`   Organization: ${config.organization ? '‚úÖ Configurada' : '‚ö†Ô∏è Opcional'}`);
        console.log(`   Base URL: ${config.baseURL}`);
        console.log(`   Cosmos DB: ${cosmosService.isAvailable() ? '‚úÖ Disponible' : '‚ö†Ô∏è No disponible'}`);
        console.log(`   Document Search: ${documentService.isAvailable() ? '‚úÖ Disponible' : '‚ö†Ô∏è No disponible'}`);
        
        if (config.apiKey) {
            console.log(`   Key Preview: ${config.apiKey.substring(0, 10)}...${config.apiKey.slice(-4)}`);
        }
    }

    /**
     * ‚úÖ MEJORADO: Inicializaci√≥n con mejor validaci√≥n
     */
    initializeOpenAI() {
        try {
            const apiKey = process.env.OPENAI_API_KEY;
            
            if (!apiKey) {
                this.initializationError = 'OPENAI_API_KEY no est√° configurada en las variables de entorno';
                console.error('‚ùå OpenAI Error:', this.initializationError);
                this.openaiAvailable = false;
                return;
            }

            // Validar formato de la API key
            if (!apiKey.startsWith('sk-') || apiKey.length < 40) {
                this.initializationError = 'OPENAI_API_KEY tiene un formato inv√°lido';
                console.error('‚ùå OpenAI Error:', this.initializationError);
                this.openaiAvailable = false;
                return;
            }
            
            console.log('üîë Configurando cliente OpenAI...');
            this.openai = new OpenAI({ 
                apiKey: apiKey,
                organization: process.env.OPENAI_ORGANIZATION || undefined,
                timeout: 45000, // 45 segundos para respuestas complejas
                maxRetries: 3   // 3 reintentos
            });
            
            this.openaiAvailable = true;
            this.initialized = true;
            
            console.log('‚úÖ Cliente OpenAI configurado exitosamente');
            
            // Test b√°sico de conectividad (opcional)
            if (process.env.NODE_ENV !== 'production') {
                this.testConnection();
            }
            
        } catch (error) {
            this.initializationError = `Error inicializando OpenAI: ${error.message}`;
            console.error('‚ùå Error inicializando OpenAI:', error);
            this.openaiAvailable = false;
        }
    }

    /**
     * ‚úÖ NUEVO: Test de conectividad b√°sico
     */
    async testConnection() {
        try {
            console.log('üß™ Probando conectividad con OpenAI...');
            
            const testResponse = await this.openai.chat.completions.create({
                model: "gpt-4o-mini",
                messages: [{ role: "user", content: "Test" }],
                max_tokens: 5,
                temperature: 0
            });
            
            if (testResponse?.choices?.length > 0) {
                console.log('‚úÖ Test de conectividad OpenAI exitoso');
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Test de conectividad fall√≥:', error.message);
        }
    }

    /**
     * ‚úÖ MEJORADO: Herramientas con nueva herramienta de tasas y documentos
     */
    defineTools() {
        const tools = [
            {
                type: "function",
                function: {
                    name: "obtener_fecha_hora_actual",
                    description: "Obtiene la fecha y hora actual en zona horaria de M√©xico",
                    parameters: { 
                        type: "object", 
                        properties: {
                            formato: {
                                type: "string",
                                enum: ["completo", "fecha", "hora", "timestamp"],
                                description: "Formato de la fecha/hora a devolver"
                            }
                        }
                    }
                }
            },
            {
                type: "function",
                function: {
                    name: "obtener_informacion_usuario",
                    description: "Obtiene informaci√≥n completa del usuario autenticado",
                    parameters: { 
                        type: "object", 
                        properties: {
                            incluir_token: {
                                type: "boolean",
                                description: "Si incluir informaci√≥n del token (solo preview)"
                            }
                        }
                    }
                }
            },
            {
                type: "function",
                function: {
                    name: "consultar_tasas_interes",
                    description: "Consulta las tasas de inter√©s de Nova para un a√±o espec√≠fico. Muestra tasas vista, fijo (1,3,6 meses), FAP, Nov y Pr√©stamos por mes.",
                    parameters: {
                        type: "object",
                        properties: {
                            anio: {
                                type: "integer",
                                description: "A√±o para consultar las tasas (ej: 2025)",
                                minimum: 2020,
                                maximum: 2030
                            }
                        },
                        required: ["anio"]
                    }
                }
            },
            {
                type: "function",
                function: {
                    name: "buscar_documentos",
                    description: "Busca documentos corporativos usando Azure Search con b√∫squeda vectorial. Incluye pol√≠ticas, manuales, procedimientos y documentaci√≥n interna.",
                    parameters: {
                        type: "object",
                        properties: {
                            consulta: {
                                type: "string",
                                description: "T√©rminos de b√∫squeda o pregunta sobre documentos corporativos"
                            }
                        },
                        required: ["consulta"]
                    }
                }
            },
            {
                type: "function",
                function: {
                    name: "buscar_politicas",
                    description: "Busca pol√≠ticas corporativas espec√≠ficas como vacaciones, c√≥digo de vestimenta, horarios, prestaciones, etc.",
                    parameters: {
                        type: "object",
                        properties: {
                            tipo_politica: {
                                type: "string",
                                enum: ["vacaciones", "codigo vestimenta", "horario", "home office", "prestaciones", "codigo conducta", "seguridad", "capacitacion", "nomina", "rh", "confidencialidad"],
                                description: "Tipo de pol√≠tica a buscar"
                            }
                        },
                        required: ["tipo_politica"]
                    }
                }
            },
            {
                type: "function",
                function: {
                    name: "obtener_dias_feriados",
                    description: "Consulta los d√≠as feriados oficiales de la empresa para un a√±o espec√≠fico",
                    parameters: {
                        type: "object",
                        properties: {
                            anio: {
                                type: "integer",
                                description: "A√±o para consultar feriados (default: a√±o actual)",
                                minimum: 2020,
                                maximum: 2030
                            }
                        }
                    }
                }
            },
            {
                type: "function",
                function: {
                    name: "consultar_api_nova",
                    description: "Realiza consultas a APIs de Nova usando el token del usuario",
                    parameters: {
                        type: "object",
                        properties: {
                            endpoint: {
                                type: "string",
                                description: "Endpoint de la API a consultar"
                            },
                            metodo: {
                                type: "string",
                                enum: ["GET", "POST"],
                                description: "M√©todo HTTP a usar"
                            },
                            parametros: {
                                type: "object",
                                description: "Par√°metros adicionales para la consulta"
                            }
                        },
                        required: ["endpoint"]
                    }
                }
            },
            {
                type: "function",
                function: {
                    name: "generar_resumen_conversacion",
                    description: "Genera un resumen de la conversaci√≥n actual",
                    parameters: { type: "object", properties: {} }
                }
            }
        ];

        return tools;
    }

    /**
     * ‚úÖ MEJORADO: Procesamiento principal con Cosmos DB
     */
    async procesarMensaje(mensaje, historial = [], userToken = null, userInfo = null, conversationId = null) {
        try {
            if (!this.openaiAvailable) {
                return this.createUnavailableResponse();
            }

            if (!this.initialized) {
                console.warn('‚ö†Ô∏è OpenAI no inicializado, reintentando...');
                this.initializeOpenAI();
                
                if (!this.openaiAvailable) {
                    return this.createUnavailableResponse();
                }
            }

            console.log(`üìù [${userInfo?.usuario || 'unknown'}] Procesando: "${mensaje}"`);
            
            // ‚úÖ NUEVO: Guardar mensaje del usuario en Cosmos DB
            if (conversationId && userInfo && cosmosService.isAvailable()) {
                await cosmosService.saveMessage(
                    mensaje, 
                    conversationId, 
                    userInfo.usuario, 
                    userInfo.nombre, 
                    'user'
                );
                
                // Actualizar actividad de conversaci√≥n
                await cosmosService.updateConversationActivity(conversationId, userInfo.usuario);
            }

            // ‚úÖ MEJORADO: Obtener historial desde Cosmos DB si est√° disponible
            let historialCompleto = historial;
            if (conversationId && userInfo && cosmosService.isAvailable() && (!historial || historial.length === 0)) {
                historialCompleto = await cosmosService.getConversationHistory(conversationId, userInfo.usuario, 10);
                console.log(`üìö Historial desde Cosmos DB: ${historialCompleto.length} mensajes`);
            }

            const mensajes = this.formatearHistorial(historialCompleto, userInfo);
            mensajes.push({ role: "user", content: mensaje });

            // ‚úÖ MEJORADO: Configuraci√≥n m√°s inteligente del modelo
            const requestConfig = {
                model: this.selectBestModel(mensaje, userInfo),
                messages: mensajes,
                temperature: this.calculateTemperature(mensaje),
                max_tokens: this.calculateMaxTokens(mensaje),
                presence_penalty: 0.1,
                frequency_penalty: 0.1
            };

            // ‚úÖ MEJORADO: Usar herramientas solo cuando sea apropiado
            if (this.shouldUseTools(mensaje)) {
                requestConfig.tools = this.tools;
                requestConfig.tool_choice = "auto";
                console.log('üõ†Ô∏è Habilitando herramientas para esta consulta');
            }

            console.log(`ü§ñ Enviando a OpenAI (${requestConfig.model})...`);
            const response = await this.openai.chat.completions.create(requestConfig);
            
            if (!response?.choices?.length) {
                throw new Error('Respuesta vac√≠a de OpenAI');
            }
            
            const messageResponse = response.choices[0].message;
            let finalResponse;

            if (messageResponse.tool_calls) {
                console.log(`üõ†Ô∏è Ejecutando ${messageResponse.tool_calls.length} herramientas...`);
                finalResponse = await this.procesarHerramientas(
                    messageResponse, 
                    mensajes, 
                    userToken, 
                    userInfo,
                    conversationId
                );
            } else {
                finalResponse = {
                    type: 'text',
                    content: messageResponse.content || 'Respuesta vac√≠a de OpenAI'
                };
            }

            // ‚úÖ NUEVO: Guardar respuesta del bot en Cosmos DB
            if (conversationId && userInfo && finalResponse.content && cosmosService.isAvailable()) {
                await cosmosService.saveMessage(
                    finalResponse.content, 
                    conversationId, 
                    userInfo.usuario, 
                    'Nova Bot', 
                    'bot'
                );
            }

            console.log(`‚úÖ [${userInfo?.usuario || 'unknown'}] Respuesta generada exitosamente`);
            return finalResponse;

        } catch (error) {
            console.error('‚ùå Error en procesarMensaje:', error);
            return this.manejarErrorOpenAI(error, userInfo);
        }
    }

    /**
     * ‚úÖ NUEVO: Seleccionar el mejor modelo seg√∫n el tipo de consulta
     */
    selectBestModel(mensaje, userInfo) {
        const mensajeLower = mensaje.toLowerCase();
        
        // Para consultas complejas o t√©cnicas, usar GPT-4
        if (mensajeLower.includes('analizar') || 
            mensajeLower.includes('explicar') ||
            mensajeLower.includes('c√≥digo') ||
            mensajeLower.includes('programar') ||
            mensajeLower.includes('tasas') ||
            mensaje.length > 200) {
            return "gpt-4o-mini";
        }
        
        // Para consultas simples, usar GPT-3.5
        return "gpt-4o-mini";
    }

    /**
     * ‚úÖ NUEVO: Calcular temperatura seg√∫n el tipo de mensaje
     */
    calculateTemperature(mensaje) {
        const mensajeLower = mensaje.toLowerCase();
        
        // Temperatura baja para consultas t√©cnicas o de informaci√≥n
        if (mensajeLower.includes('qu√© es') || 
            mensajeLower.includes('c√≥mo') ||
            mensajeLower.includes('explicar') ||
            mensajeLower.includes('informaci√≥n') ||
            mensajeLower.includes('tasas')) {
            return 0.3;
        }
        
        // Temperatura alta para creatividad
        if (mensajeLower.includes('crear') ||
            mensajeLower.includes('escribe') ||
            mensajeLower.includes('idea')) {
            return 0.8;
        }
        
        // Temperatura media por defecto
        return 0.7;
    }

    /**
     * ‚úÖ NUEVO: Calcular tokens m√°ximos seg√∫n la consulta
     */
    calculateMaxTokens(mensaje) {
        if (mensaje.length > 500) return 4000;  // Consultas largas
        if (mensaje.length > 200) return 2000;  // Consultas medianas
        return 1500;  // Consultas cortas
    }

    /**
     * ‚úÖ MEJORADO: Decidir si usar herramientas con detecci√≥n mejorada
     */
    shouldUseTools(mensaje) {
        const mensajeLower = mensaje.toLowerCase();
        
        const toolKeywords = [
            // Fecha y hora
            'fecha', 'hora', 'd√≠a', 'hoy', 'cuando', 'qu√© d√≠a',
            
            // Informaci√≥n personal
            'mi informaci√≥n', 'mis datos', 'perfil', 'mi info', 'quien soy',
            
            // APIs y consultas
            'consultar', 'api', 'buscar',
            
            // Historial
            'resumen', 'historial', 'conversaci√≥n',
            
            // Tasas de inter√©s - PALABRAS CLAVE MEJORADAS
            'tasas', 'tasa', 'interes', 'inter√©s', 'pr√©stamo', 'cr√©dito',
            'vista', 'fijo', 'fap', 'nov', 'dep√≥sito', 'dep√≥sitos',
            'ahorro', 'ahorros', 'inversi√≥n', 'rendimiento',
            
            // Documentos - DETECCI√ìN MEJORADA
            'documento', 'documentos', 'archivo', 'archivos',
            'pol√≠tica', 'pol√≠ticas', 'politica', 'politicas',
            'manual', 'manuales', 'procedimiento', 'procedimientos',
            'normativa', 'normas', 'reglamento', 'gu√≠a', 'guias',
            
            // Nombres espec√≠ficos de archivos
            'ajustes.docx', 'ajustes', '.docx', '.pdf', '.doc',
            
            // Pol√≠ticas espec√≠ficas
            'vacaciones', 'feriados', 'festivos', 'dias libres',
            'horario', 'horarios', 'jornada', 'trabajo',
            'vestimenta', 'uniforme', 'dress code',
            'prestaciones', 'beneficios', 'compensaciones', 'aguinaldo',
            'seguridad', 'higiene', 'riesgos', 'protecci√≥n',
            'capacitaci√≥n', 'entrenamiento', 'cursos', 'formaci√≥n',
            'c√≥digo de conducta', '√©tica', 'comportamiento',
            'recursos humanos', 'rh', 'personal', 'contrataci√≥n',
            'n√≥mina', 'salarios', 'pagos', 'descuentos'
        ];
        
        const usarHerramientas = toolKeywords.some(keyword => mensajeLower.includes(keyword));
        
        if (usarHerramientas) {
            console.log(`üõ†Ô∏è Herramientas habilitadas para: "${mensaje}"`);
            console.log(`   Palabras clave detectadas: ${toolKeywords.filter(k => mensajeLower.includes(k)).join(', ')}`);
        }
        
        return usarHerramientas;
    }

    /**
     * ‚úÖ MEJORADO: Procesamiento de herramientas con mejor logging
     */
    async procesarHerramientas(messageResponse, mensajes, userToken, userInfo, conversationId) {
        const resultados = [];

        for (const call of messageResponse.tool_calls) {
            const { function: fnCall, id } = call;
            const { name, arguments: args } = fnCall;
            
            try {
                console.log(`üîß Ejecutando herramienta: ${name}`);
                
                const parametros = JSON.parse(args || '{}');
                const resultado = await this.ejecutarHerramienta(
                    name, 
                    parametros, 
                    userToken, 
                    userInfo, 
                    conversationId
                );
                
                resultados.push({
                    tool_call_id: id,
                    content: typeof resultado === 'object' ? 
                        JSON.stringify(resultado, null, 2) : String(resultado)
                });
                
                console.log(`‚úÖ Herramienta ${name} ejecutada exitosamente`);
                
            } catch (error) {
                console.error(`‚ùå Error ejecutando herramienta ${name}:`, error);
                resultados.push({
                    tool_call_id: id,
                    content: `Error ejecutando ${name}: ${error.message}`
                });
            }
        }

        // ‚úÖ MEJORADO: Generar respuesta final con mejor contexto
        const finalMessages = [
            ...mensajes,
            messageResponse,
            ...resultados.map(result => ({
                role: "tool",
                tool_call_id: result.tool_call_id,
                content: result.content
            }))
        ];

        console.log('üîÑ Generando respuesta final con resultados de herramientas...');
        
        const finalResponse = await this.openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: finalMessages,
            temperature: 0.7,
            max_tokens: 3000
        });

        return {
            type: 'text',
            content: finalResponse.choices[0].message.content || 'No se pudo generar respuesta final'
        };
    }

    /**
     * ‚úÖ CORREGIDO: Herramientas con mejor detecci√≥n de documentos
     */
    async ejecutarHerramienta(nombre, parametros, userToken, userInfo, conversationId) {
        const userId = userInfo?.usuario || 'unknown';
        console.log(`üîß [${userId}] Ejecutando herramienta: ${nombre}`);
        console.log(`üìã [${userId}] Par√°metros:`, parametros);

        switch (nombre) {
            case 'obtener_fecha_hora_actual':
                return this.obtenerFechaHora(parametros.formato || 'completo');

            case 'obtener_informacion_usuario':
                return this.obtenerInfoUsuario(userInfo, parametros.incluir_token);

            case 'consultar_tasas_interes':
                console.log(`üí∞ [${userId}] Consultando tasas para a√±o: ${parametros.anio}`);
                return await this.consultarTasasInteres(parametros.anio, userToken, userInfo);

            case 'buscar_documentos':
                console.log(`üìñ [${userId}] Buscando documentos: "${parametros.consulta}"`);
                return await this.buscarDocumentos(parametros.consulta, userInfo);

            case 'buscar_politicas':
                console.log(`üìã [${userId}] Buscando pol√≠tica: ${parametros.tipo_politica}`);
                return await this.buscarPoliticas(parametros.tipo_politica, userInfo);

            case 'obtener_dias_feriados':
                console.log(`üìÖ [${userId}] Obteniendo feriados para: ${parametros.anio || 'a√±o actual'}`);
                return await this.obtenerDiasFeriados(parametros.anio, userInfo);

            case 'consultar_api_nova':
                console.log(`üåê [${userId}] Consultando API Nova: ${parametros.endpoint}`);
                return await this.consultarApiNova(
                    parametros.endpoint, 
                    userToken, 
                    parametros.metodo || 'GET',
                    parametros.parametros
                );

            case 'generar_resumen_conversacion':
                console.log(`üìä [${userId}] Generando resumen de conversaci√≥n`);
                return await this.generarResumenConversacion(conversationId, userInfo);

            default:
                throw new Error(`Herramienta desconocida: ${nombre}`);
        }
    }

    /**
     * ‚úÖ NUEVO: Consultar tasas de inter√©s de Nova
     */
    async consultarTasasInteres(anio, userToken, userInfo) {
        try {
            if (!userToken || !userInfo) {
                return "‚ùå **Error**: Usuario no autenticado para consultar tasas";
            }

            // Extraer informaci√≥n del token/userInfo
            const cveUsuario = userInfo.usuario;
            const numRI = this.extractNumRIFromToken(userToken) || "7"; // Default "7" si no se encuentra

            console.log(`üí∞ [${cveUsuario}] Consultando tasas para a√±o ${anio}`);

            const requestBody = {
                usuarioActual: {
                    CveUsuario: cveUsuario
                },
                data: {
                    NumRI: numRI,
                    Anio: anio
                }
            };

            console.log('üì° Request body para tasas:', JSON.stringify(requestBody, null, 2));
            const url = process.env.NOVA_API_URL_TASA || 'https://pruebas.nova.com.mx/ApiRestNova/api/ConsultaTasa/consultaTasa';
            
            const response = await axios.post(
                url,
                requestBody,
                {
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${userToken}`,
                        'Accept': 'application/json'
                    },
                    timeout: 15000
                }
            );

            console.log(`üìä Respuesta tasas (${response.status}):`, JSON.stringify(response.data, null, 2));

            if (response.status === 200 && response.data?.info) {
                return this.formatearTablaTasas(response.data.info, anio, cveUsuario);
            } else {
                return `‚ö†Ô∏è **Respuesta inesperada al consultar tasas**: Status ${response.status}`;
            }

        } catch (error) {
            console.error('‚ùå Error consultando tasas de inter√©s:', error.message);
            
            if (error.response?.status === 401) {
                return "üîí **Error de autorizaci√≥n**: Tu token puede haber expirado. Intenta cerrar sesi√≥n e iniciar nuevamente.";
            } else if (error.response?.status === 404) {
                return "‚ùå **Servicio no encontrado**: El servicio de consulta de tasas no est√° disponible.";
            } else if (error.response?.status === 400) {
                return `‚ùå **Datos inv√°lidos**: Verifica que el a√±o ${anio} sea v√°lido.`;
            } else {
                return `‚ùå **Error consultando tasas**: ${error.message}`;
            }
        }
    }

    /**
     * ‚úÖ NUEVO: Extraer NumRI del token JWT
     */
    extractNumRIFromToken(token) {
        try {
            if (!token || typeof token !== 'string') {
                return null;
            }

            // Remover 'Bearer ' si est√° presente
            const cleanToken = token.replace(/^Bearer\s+/, '');

            // Verificar formato JWT
            const tokenParts = cleanToken.split('.');
            if (tokenParts.length !== 3) {
                return null;
            }

            // Decodificar payload
            const payload = JSON.parse(Buffer.from(tokenParts[1], 'base64').toString());
            
            // Buscar NumRI en diferentes posibles campos
            const numRI = payload.NumRI || 
                         payload.numRI || 
                         payload.RI || 
                         payload.ri || 
                         payload.region ||
                         "7"; // Default

            console.log(`üîç NumRI extra√≠do del token: ${numRI}`);
            return numRI;

        } catch (error) {
            console.warn('‚ö†Ô∏è Error extrayendo NumRI del token:', error.message);
            return "7"; // Default value
        }
    }

    /**
     * ‚úÖ NUEVO: Formatear tabla de tasas COMPLETAMENTE REDISE√ëADO para Teams
     * Formato simple, limpio y totalmente compatible
     */
    formatearTablaTasas(tasasData, anio, usuario) {
        try {
            if (!tasasData || !Array.isArray(tasasData)) {
                return "‚ùå **Error**: Datos de tasas inv√°lidos";
            }

            // Encabezado principal estilizado pero simple
            let tabla = `üí∞ **TASAS DE INTER√âS NOVA CORPORATION ${anio}**\n\n`;
            tabla += `üë§ **Usuario**: ${usuario}  üìÖ **A√±o**: ${anio}  üïê **Actualizado**: ${new Date().toLocaleDateString('es-MX')}\n\n`;

            // Procesar cada mes con formato limpio
            tabla += `üìä **DETALLE POR MES:**\n\n`;
            
            tasasData.forEach((mes, index) => {
                if (mes.Mes) {
                    // Encabezado del mes con separador visual
                    tabla += `üóìÔ∏è **${mes.Mes.toUpperCase()}**\n`;
                    tabla += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
                    
                    // Cuenta Vista
                    const vista = mes.vista !== undefined ? `${mes.vista}%` : 'N/A';
                    tabla += `üí≥ **Cuenta Vista (Ahorros):** ${vista}\n`;
                    
                    // Dep√≥sitos a Plazo Fijo
                    tabla += `üìà **Dep√≥sitos a Plazo Fijo:**\n`;
                    const fijo1 = mes.fijo1 !== undefined ? `${mes.fijo1}%` : 'N/A';
                    const fijo3 = mes.fijo3 !== undefined ? `${mes.fijo3}%` : 'N/A';
                    const fijo6 = mes.fijo6 !== undefined ? `${mes.fijo6}%` : 'N/A';
                    tabla += `   üî∏ 1 mes: ${fijo1}    üî∏ 3 meses: ${fijo3}    üî∏ 6 meses: ${fijo6}\n`;
                    
                    // Otros productos financieros
                    const fap = mes.FAP !== undefined ? `${mes.FAP}%` : 'N/A';
                    const nov = mes.Nov !== undefined ? `${mes.Nov}%` : 'N/A';
                    const prestamos = mes.Prestamos !== undefined ? `${mes.Prestamos}%` : 'N/A';
                    
                    tabla += `üè¶ **FAP (Fondo Ahorro):** ${fap}    üîÑ **Novaci√≥n:** ${nov}\n`;
                    tabla += `üí∏ **Pr√©stamos:** ${prestamos}\n`;
                    
                    // Espaciado entre meses
                    if (index < tasasData.length - 1) {
                        tabla += `\n`;
                    }
                }
            });

            // Secci√≥n de an√°lisis y recomendaciones
            tabla += `\n\nüí° **AN√ÅLISIS Y RECOMENDACIONES**\n`;
            tabla += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;

            // Encontrar mejores tasas del √∫ltimo mes
            const tasasConDatos = tasasData.filter(mes => 
                mes.vista !== undefined || mes.fijo6 !== undefined
            );
            
            if (tasasConDatos.length > 0) {
                const ultimasTasas = tasasConDatos[tasasConDatos.length - 1];
                
                tabla += `‚≠ê **MEJORES OPCIONES ACTUALES (${ultimasTasas.Mes || '√öltimo mes'}):**\n\n`;
                
                // Destacar la mejor tasa para ahorro
                const tasasAhorro = [
                    { tipo: 'Dep√≥sito 6 meses', tasa: ultimasTasas.fijo6, emoji: 'üèÜ' },
                    { tipo: 'FAP Empleados', tasa: ultimasTasas.FAP, emoji: 'üíº' },
                    { tipo: 'Dep√≥sito 3 meses', tasa: ultimasTasas.fijo3, emoji: 'üìä' },
                    { tipo: 'Cuenta Vista', tasa: ultimasTasas.vista, emoji: 'üí≥' }
                ].filter(item => item.tasa !== undefined)
                 .sort((a, b) => b.tasa - a.tasa);

                if (tasasAhorro.length > 0) {
                    tabla += `${tasasAhorro[0].emoji} **MEJOR PARA AHORRAR:** ${tasasAhorro[0].tipo} - **${tasasAhorro[0].tasa}%**\n`;
                    
                    if (tasasAhorro.length > 1) {
                        tabla += `${tasasAhorro[1].emoji} **SEGUNDA OPCI√ìN:** ${tasasAhorro[1].tipo} - **${tasasAhorro[1].tasa}%**\n`;
                    }
                }
                
                // Informaci√≥n sobre pr√©stamos
                if (ultimasTasas.Prestamos) {
                    tabla += `üí∏ **PR√âSTAMOS:** ${ultimasTasas.Prestamos}% - `;
                    if (ultimasTasas.Prestamos < 13) {
                        tabla += `‚úÖ Tasa competitiva\n`;
                    } else {
                        tabla += `‚ö†Ô∏è Considera comparar opciones\n`;
                    }
                }
            }

            // An√°lisis de tendencia (si hay suficientes datos)
            if (tasasData.length >= 2) {
                const primerMes = tasasData[0];
                const ultimoMes = tasasData[tasasData.length - 1];
                
                tabla += `\nüìä **TENDENCIA DEL A√ëO ${anio}:**\n`;
                
                if (primerMes.fijo6 && ultimoMes.fijo6) {
                    const diferencia = ultimoMes.fijo6 - primerMes.fijo6;
                    const tendencia = diferencia > 0 ? 'üìà Subieron' : diferencia < 0 ? 'üìâ Bajaron' : '‚û°Ô∏è Estables';
                    tabla += `üî∏ **Dep√≥sitos 6 meses:** ${tendencia} (${diferencia > 0 ? '+' : ''}${diferencia.toFixed(2)}%)\n`;
                }
                
                if (primerMes.Prestamos && ultimoMes.Prestamos) {
                    const diferencia = ultimoMes.Prestamos - primerMes.Prestamos;
                    const tendencia = diferencia > 0 ? 'üìà Subieron' : diferencia < 0 ? 'üìâ Bajaron' : '‚û°Ô∏è Estables';
                    tabla += `üî∏ **Pr√©stamos:** ${tendencia} (${diferencia > 0 ? '+' : ''}${diferencia.toFixed(2)}%)\n`;
                }
            }

            // Descripci√≥n de productos (m√°s concisa)
            tabla += `\nüìã **TIPOS DE PRODUCTOS:**\n`;
            tabla += `üí≥ **Vista:** Disponibilidad inmediata  üìà **Dep√≥sitos:** Tasa fija garantizada\n`;
            tabla += `üè¶ **FAP:** Fondo empleados  üîÑ **Novaci√≥n:** Renovaci√≥n autom√°tica  üí∏ **Pr√©stamos:** Cr√©ditos personales\n`;

            // Call to action
            tabla += `\nüí¨ **¬øNecesitas asesor√≠a personalizada?** Preg√∫ntame sobre cualquier producto espec√≠fico.`;

            return tabla;

        } catch (error) {
            console.error('‚ùå Error formateando tabla de tasas:', error);
            return `‚ùå **Error formateando tasas**: ${error.message}`;
        }
    }

    /**
     * ‚úÖ NUEVO: Obtener fecha/hora con diferentes formatos
     */
    obtenerFechaHora(formato) {
        const ahora = DateTime.now().setZone('America/Mexico_City');
        
        switch (formato) {
            case 'fecha':
                return ahora.toFormat('dd/MM/yyyy');
            case 'hora':
                return ahora.toFormat('HH:mm:ss');
            case 'timestamp':
                return ahora.toISO();
            case 'completo':
            default:
                return `üìÖ **Fecha y Hora Actual**\n\n` +
                       `üìÖ Fecha: ${ahora.toFormat('dd/MM/yyyy')}\n` +
                       `üïê Hora: ${ahora.toFormat('HH:mm:ss')}\n` +
                       `üåé Zona: ${ahora.zoneName}\n` +
                       `üìù D√≠a: ${ahora.toFormat('cccc', { locale: 'es' })}`;
        }
    }

    /**
     * ‚úÖ MEJORADO: Informaci√≥n de usuario m√°s completa
     */
    obtenerInfoUsuario(userInfo, incluirToken = false) {
        if (!userInfo) {
            return "‚ùå **Error**: Usuario no autenticado";
        }

        let info = `üë§ **Informaci√≥n del Usuario**\n\n` +
                   `üìù **Nombre Completo**: ${userInfo.nombre} ${userInfo.paterno || ''} ${userInfo.materno || ''}`.trim() + '\n' +
                   `üë§ **Usuario**: ${userInfo.usuario}\n` +
                   `üìß **ID Corporativo**: ${userInfo.usuario}\n`;

        if (incluirToken && userInfo.token) {
            info += `üîë **Token**: ${userInfo.token.substring(0, 20)}...${userInfo.token.slice(-5)}\n`;
            info += `üîí **Estado Token**: ‚úÖ V√°lido\n`;
            
            // Mostrar NumRI si est√° disponible
            const numRI = this.extractNumRIFromToken(userInfo.token);
            if (numRI) {
                info += `üè¶ **Regi√≥n/RI**: ${numRI}\n`;
            }
        }

        info += `\nüíº **Estado**: Autenticado y listo para usar el bot`;
        info += `\nüíæ **Persistencia**: ${cosmosService.isAvailable() ? '‚úÖ Cosmos DB activo' : '‚ö†Ô∏è Solo memoria'}`;

        return info;
    }

    /**
     * ‚úÖ MEJORADO: Consultar APIs de Nova usando el token
     */
    async consultarApiNova(endpoint, userToken, metodo = 'GET', parametros = {}) {
        try {
            if (!userToken) {
                return "‚ùå **Error**: No hay token de autenticaci√≥n disponible";
            }

            // ‚úÖ Lista de endpoints permitidos (por seguridad)
            const endpointsPermitidos = [
                '/api/user/profile',
                '/api/user/info',
                '/api/empleados/datos',
                '/api/consultas/generales',
                '/api/ConsultaTasa/consultaTasa'
            ];

            if (!endpointsPermitidos.some(ep => endpoint.includes(ep))) {
                return `‚ö†Ô∏è **Endpoint no permitido**: ${endpoint}\n\nEndpoints disponibles:\n${endpointsPermitidos.join('\n')}`;
            }

            const baseUrl = 'https://pruebas.nova.com.mx/ApiRestNova';
            const url = `${baseUrl}${endpoint}`;

            console.log(`üåê Consultando Nova API: ${metodo} ${endpoint}`);

            const config = {
                method: metodo,
                url: url,
                headers: {
                    'Authorization': `Bearer ${userToken}`,
                    'Content-Type': 'application/json'
                },
                timeout: 15000
            };

            if (metodo === 'POST' && parametros) {
                config.data = parametros;
            }

            const response = await axios(config);

            if (response.status === 200) {
                return `‚úÖ **Consulta exitosa a Nova API**\n\n` +
                       `üìä **Endpoint**: ${endpoint}\n` +
                       `üìù **Datos**: ${JSON.stringify(response.data, null, 2)}`;
            } else {
                return `‚ö†Ô∏è **Respuesta inesperada**: Status ${response.status}`;
            }

        } catch (error) {
            console.error('Error consultando Nova API:', error.message);
            
            if (error.response?.status === 401) {
                return "üîí **Error de autorizaci√≥n**: Tu token puede haber expirado. Intenta cerrar sesi√≥n e iniciar nuevamente.";
            } else if (error.response?.status === 404) {
                return `‚ùå **Endpoint no encontrado**: ${endpoint}`;
            } else {
                return `‚ùå **Error de conexi√≥n**: ${error.message}`;
            }
        }
    }

    /**
     * ‚úÖ MEJORADO: Generar resumen de conversaci√≥n con Cosmos DB
     */
    async generarResumenConversacion(conversationId, userInfo) {
        try {
            if (!conversationId || !userInfo) {
                return "‚ö†Ô∏è No hay informaci√≥n de conversaci√≥n disponible para generar resumen";
            }

            let historial = [];
            let estadisticas = {};

            if (cosmosService.isAvailable()) {
                console.log(`üìä Generando resumen desde Cosmos DB para ${userInfo.usuario}`);
                
                historial = await cosmosService.getConversationHistory(conversationId, userInfo.usuario, 50);
                
                // Obtener informaci√≥n adicional de la conversaci√≥n
                const conversationInfo = await cosmosService.getConversationInfo(conversationId, userInfo.usuario);
                
                estadisticas = {
                    totalMensajes: historial.length,
                    ultimaActividad: conversationInfo?.lastActivity || 'Desconocida',
                    conversacionCreada: conversationInfo?.createdAt || 'Desconocida',
                    persistencia: 'Cosmos DB'
                };
            } else {
                return "‚ö†Ô∏è Cosmos DB no disponible - No se puede generar resumen completo";
            }
            
            if (historial.length === 0) {
                return "üìù **Conversaci√≥n nueva** - A√∫n no hay mensajes para resumir";
            }

            // Analizar tipos de mensajes
            const mensajesUsuario = historial.filter(msg => msg.type === 'user').length;
            const mensajesBot = historial.filter(msg => msg.type === 'bot').length;

            // Crear resumen
            let resumen = `üìã **Resumen de Conversaci√≥n**\n\n`;
            resumen += `üë§ **Usuario**: ${userInfo.nombre} (${userInfo.usuario})\n`;
            resumen += `üí¨ **Total de mensajes**: ${estadisticas.totalMensajes}\n`;
            resumen += `üì§ **Mensajes del usuario**: ${mensajesUsuario}\n`;
            resumen += `ü§ñ **Respuestas del bot**: ${mensajesBot}\n`;
            resumen += `üïê **√öltima actividad**: ${estadisticas.ultimaActividad}\n`;
            resumen += `üìÖ **Conversaci√≥n iniciada**: ${estadisticas.conversacionCreada}\n`;
            resumen += `üíæ **Persistencia**: ${estadisticas.persistencia}\n\n`;

            // Mostrar √∫ltimos mensajes
            const ultimosMensajes = historial.slice(-6);
            resumen += `üìù **√öltimos mensajes**:\n`;
            ultimosMensajes.forEach((msg, index) => {
                const tipo = msg.type === 'user' ? 'üë§ Usuario' : 'ü§ñ Bot';
                const preview = msg.message.length > 100 ? 
                    msg.message.substring(0, 100) + '...' : 
                    msg.message;
                resumen += `${index + 1}. ${tipo}: ${preview}\n`;
            });

            return resumen;

        } catch (error) {
            console.error('Error generando resumen:', error);
            return `‚ùå Error generando resumen: ${error.message}`;
        }
    }

    /**
     * ‚úÖ MEJORADO: Formateo de historial con mejor contexto
     */
    formatearHistorial(historial, userInfo) {
        const fechaActual = DateTime.now().setZone('America/Mexico_City');
        
        const userContext = userInfo ? 
            `Usuario autenticado: ${userInfo.nombre} (${userInfo.usuario})` : 
            'Usuario no autenticado';

        const persistenciaInfo = cosmosService.isAvailable() ? 
            'Persistencia: Cosmos DB activa' : 
            'Persistencia: Solo memoria temporal';

        const documentosInfo = documentService.isAvailable() ?
            'B√∫squeda de Documentos: Azure Search activo con embeddings vectoriales' :
            'B√∫squeda de Documentos: No disponible';

        const mensajes = [{
            role: "system",
            content: `Eres un asistente corporativo inteligente para Nova Corporation.

üî∑ **Contexto del Usuario:**
${userContext}

üî∑ **Fecha y Hora Actual:**
${fechaActual.toFormat('dd/MM/yyyy HH:mm:ss')} (${fechaActual.zoneName})

üî∑ **Estado del Sistema:**
${persistenciaInfo}
${documentosInfo}

üî∑ **Tus Capacidades:**
‚Ä¢ Conversaci√≥n natural e inteligente con persistencia
‚Ä¢ Consulta de tasas de inter√©s de Nova (herramienta especializada)
‚Ä¢ B√∫squeda de documentos corporativos con IA vectorial
‚Ä¢ Consulta de pol√≠ticas empresariales (vacaciones, horarios, prestaciones, etc.)
‚Ä¢ Informaci√≥n de d√≠as feriados oficiales
‚Ä¢ Acceso a informaci√≥n del usuario autenticado
‚Ä¢ Consultas a APIs internas de Nova
‚Ä¢ An√°lisis y explicaciones detalladas
‚Ä¢ Historial de conversaciones (${cosmosService.isAvailable() ? 'persistente' : 'temporal'})

üî∑ **Herramientas Especiales:**
‚Ä¢ Consulta de tasas de inter√©s por a√±o
‚Ä¢ B√∫squeda vectorial de documentos corporativos
‚Ä¢ Pol√≠ticas espec√≠ficas (RH, seguridad, prestaciones)
‚Ä¢ Calendario de d√≠as feriados
‚Ä¢ Informaci√≥n de usuario completa
‚Ä¢ Resumen de conversaciones
‚Ä¢ Consultas a APIs de Nova

üî∑ **Personalidad:**
‚Ä¢ Profesional pero amigable
‚Ä¢ √ötil y proactivo para temas financieros
‚Ä¢ Claro y conciso en respuestas
‚Ä¢ Enfocado en productividad corporativa y servicios financieros

üî∑ **Importante:**
‚Ä¢ Siempre mant√©n la informaci√≥n del usuario segura
‚Ä¢ Para consultas de tasas, usa la herramienta especializada
‚Ä¢ Si no tienes informaci√≥n espec√≠fica, sugiere c√≥mo obtenerla
‚Ä¢ Las conversaciones se guardan ${cosmosService.isAvailable() ? 'permanentemente' : 'temporalmente'}`
        }];
        
        // Procesar historial
        if (historial && historial.length > 0) {
            const recientes = historial.slice(-8); // Mantener solo los 8 m√°s recientes
            recientes.forEach(item => {
                if (item.message && item.message.trim()) {
                    const role = item.type === 'user' || item.userId !== 'bot' ? "user" : "assistant";
                    mensajes.push({
                        role: role,
                        content: item.message.trim()
                    });
                }
            });
        }

        return mensajes;
    }

    /**
     * ‚úÖ MEJORADO: Respuesta cuando OpenAI no est√° disponible
     */
    createUnavailableResponse() {
        let message = 'üö´ **El servicio de inteligencia artificial no est√° disponible**\n\n';
        
        if (this.initializationError) {
            message += `**Problema detectado**: ${this.initializationError}\n\n`;
        }
        
        message += '**Funciones limitadas disponibles:**\n';
        message += '‚Ä¢ `mi info` - Ver tu informaci√≥n\n';
        message += '‚Ä¢ `logout` - Cerrar sesi√≥n\n';
        message += '‚Ä¢ `ayuda` - Ver comandos disponibles\n\n';
        
        if (cosmosService.isAvailable()) {
            message += '‚úÖ **Persistencia activa**: Tus conversaciones se guardan en Cosmos DB\n\n';
        } else {
            message += '‚ö†Ô∏è **Solo memoria temporal**: Las conversaciones no se guardan\n\n';
        }
        
        message += '**Para restaurar funcionalidad completa:**\n';
        message += '‚Ä¢ Contacta al administrador del sistema\n';
        message += '‚Ä¢ Verifica la configuraci√≥n de OpenAI\n';

        return {
            type: 'text',
            content: message
        };
    }

    /**
     * ‚úÖ MEJORADO: Manejo de errores m√°s espec√≠fico
     */
    manejarErrorOpenAI(error, userInfo) {
        const userId = userInfo?.usuario || 'unknown';
        console.error(`üö® [${userId}] Error OpenAI:`, {
            message: error.message,
            code: error.code,
            type: error.type,
            status: error.status
        });

        let message = `‚ùå **Error del asistente de IA**\n\n`;

        if (error.code === 'rate_limit_exceeded') {
            message += '**Problema**: L√≠mite de consultas excedido temporalmente\n';
            message += '**Soluci√≥n**: Espera 1-2 minutos e intenta nuevamente\n';
        } else if (error.code === 'insufficient_quota') {
            message += '**Problema**: Cuota de OpenAI agotada\n';
            message += '**Soluci√≥n**: Contacta al administrador del sistema\n';
        } else if (error.code === 'invalid_api_key') {
            message += '**Problema**: Configuraci√≥n de API inv√°lida\n';
            message += '**Soluci√≥n**: El administrador debe verificar la configuraci√≥n\n';
        } else if (error.message?.includes('timeout')) {
            message += '**Problema**: Tiempo de respuesta agotado\n';
            message += '**Soluci√≥n**: Tu consulta puede ser muy compleja, intenta simplificarla\n';
        } else {
            message += `**Problema**: ${error.message}\n`;
            message += '**Soluci√≥n**: Intenta reformular tu mensaje o contacta soporte\n';
        }

        message += `\n**Mientras tanto, puedes usar:**\n`;
        message += `‚Ä¢ \`mi info\` - Ver tu informaci√≥n\n`;
        message += `‚Ä¢ \`ayuda\` - Ver comandos disponibles\n`;
        
        if (cosmosService.isAvailable()) {
            message += `‚Ä¢ Tu historial se mantiene guardado en Cosmos DB`;
        }

        return {
            type: 'text',
            content: message
        };
    }

    /**
     * ‚úÖ MEJORADO: Estad√≠sticas del servicio con Cosmos DB y DocumentService
     */
    getServiceStats() {
        return {
            initialized: this.initialized,
            available: this.openaiAvailable,
            error: this.initializationError,
            modelsAvailable: ['gpt-4o-mini'],
            featuresEnabled: {
                tools: true,
                conversation_history: true,
                user_context: true,
                api_integration: true,
                tasas_interes: true,
                document_search: documentService.isAvailable(),
                vector_search: documentService.isAvailable() && documentService.getConfigInfo().features.vectorSearch,
                policy_search: documentService.isAvailable(),
                holiday_search: documentService.isAvailable(),
                cosmos_persistence: cosmosService.isAvailable()
            },
            cosmosDB: cosmosService.getConfigInfo(),
            documentService: documentService.getConfigInfo(),
            timestamp: new Date().toISOString()
        };
    }

    /**
     * ‚úÖ NUEVO: Diagn√≥stico del estado de servicios
     */
    async diagnosticarServicios() {
        const estado = {
            openai: {
                disponible: this.openaiAvailable,
                error: this.initializationError
            },
            cosmosDB: {
                disponible: cosmosService.isAvailable(),
                config: cosmosService.getConfigInfo()
            },
            documentService: {
                disponible: documentService.isAvailable(),
                config: documentService.getConfigInfo()
            }
        };

        return estado;
    }
}

module.exports = new OpenAIService();